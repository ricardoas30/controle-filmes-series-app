{"version":3,"file":"scripts.c8589ff4ab0261a2.js","mappings":"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","names":["window","NOT_DISABLED_NOT_RESET","defaults","autoReset","basic","closable","closableByDimmer","invokeOnCloseOff","frameless","defaultFocusOff","maintainFocus","maximizable","modal","movable","moveBounded","overflow","padding","pinnable","pinned","preventBodyShift","resizable","startMaximized","transition","transitionOff","tabbable","join","notifier","delay","position","closeButton","classes","base","prefix","message","top","right","bottom","left","center","visible","hidden","close","glossary","title","ok","cancel","acccpt","deny","confirm","decline","maximize","restore","theme","input","hooks","preinit","postinit","openDialogs","addClass","element","classNames","className","removeClass","original","split","toBeRemoved","x","length","index","indexOf","splice","isRightToLeft","getComputedStyle","document","body","direction","getScrollTop","documentElement","scrollTop","getScrollLeft","scrollLeft","clearContents","lastChild","removeChild","copy","src","cpy","Array","isArray","push","Date","getTime","RegExp","source","global","ignoreCase","multiline","lastIndex","prop","hasOwnProperty","destruct","instance","initialize","elements","root","parentNode","settings","__settings","__init","__internal","IsPassiveSupported","options","Object","defineProperty","get","addEventListener","removeEventListener","on","el","event","fn","useCapture","passive","capture","off","t","type","supported","transitions","animation","OAnimation","msAnimation","MozAnimation","WebkitAnimation","style","delegate","context","method","arguments","args","apply","createCloseEvent","button","dispatchEvent","eventType","call","dialog","scrollX","scrollY","usedKeys","tabindex","isSafari","navigator","userAgent","templates","animationIn","animationOut","fixed","maximized","modeless","noSelection","noOverflow","noPadding","pin","shake","unpinned","noTransition","setup","alertify","focus","buttons","select","buttonsDefinition","b","ref","i","internal","isOpen","activeElement","timerIn","timerOut","onshow","onclosing","onclose","onfocus","onmove","onmoved","onresize","onresized","onmaximize","onmaximized","onrestore","onrestored","resetHandler","beginMoveHandler","beginResizeHandler","bringToFrontHandler","modalClickHandler","buttonsClickHandler","commandsClickHandler","transitionInHandler","transitionOutHandler","destroy","createElement","display","innerHTML","dimmer","firstChild","reset","commands","container","nextSibling","header","content","footer","resizeHandle","auxiliary","primary","buttonTemplate","key","cloneNode","text","attrs","setAttribute","scope","appendChild","opKey","onReset","beginMove","beginResize","bringToFront","handleTransitionInEvent","handleTransitionOutEvent","set","build","restoreScrollPosition","scrollTo","ensureNoOverflow","requiresNoOverflow","isModal","isMaximized","topScroll","add","scrollHeight","clientHeight","setFocus","update","obj","callback","value","old","result","op","items","found","Error","triggerClose","triggerCallback","invokeOnClose","srcElement","target","isPinned","unpin","addAbsPositionFix","marginTop","marginLeft","marginRight","removeAbsPositionFix","parseInt","updateAbsPositionFix","cancelClick","modalClickHandlerTS","timeStamp","callbackTS","cancelKeyup","check","now","idx","disabled","closeEvent","keyupHandler","keyCode","keydownHandler","keys","preventDefault","stopPropagation","resetTarget","querySelector","firstReset","lastReset","lastFocusedElement","relatedTarget","within","contains","findTabbable","last","tabbables","slice","querySelectorAll","reverse","offsetParent","offsetWidth","offsetHeight","getClientRects","recycleTab","shiftKey","clearTimeout","resetMove","resetResize","offsetX","offsetY","xProp","yProp","bounds","refreshTop","moveDelegate","moveElement","moveElementBounded","Math","min","maxLeft","max","minLeft","maxTop","minTop","eventSrc","targetTouches","current","offsetLeft","offsetTop","move","endMove","startingLeft","Number","Nan","startingWidth","minWidth","handleOffset","height","minHeight","width","maxWidth","resize","resizeElement","pageRelative","X","Y","pageX","pageY","clientX","clientY","isRTL","isNaN","diff","abs","endResize","windowResize","bindModelessEvents","unbindModelessEvents","bindMovableEvents","unbindMovableEvents","bindResizableEvents","unbindResizableEvents","this","moveTo","y","resizeTo","w","parseFloat","h","regex","match","clientWidth","setting","self","k","o","n","optionUpdated","option","oldValue","newValue","setHeader","updateDisplayMode","updateBasicMode","updateFramelessMode","updatePinned","updateClosable","bindClosableEvents","unbindClosableEvents","updateMaximizable","updatePinnable","updateMovable","updateResizable","updateTransition","updateTransitionOff","onupdate","settingUpdated","item","HTMLElement","setContent","showModal","show","setTimeout","hasAttribute","prepare","bindEvents","saveScrollPosition","removeAttribute","unbindEvents","closeOthers","closeAll","openInstances","baseClass","updatePosition","create","div","clickDelegate","getAttribute","dismiss","transitionDone","clearTimers","timer","transitionTimeout","pushed","clickHandler","transitionEndHandler","_content","_wait","wait","pushInstance","insertBefore","ondismiss","clicked","popInstance","dismissOthers","dismissAll","except","clone","Alertify","dialogs","extend","sub","get_dialog","name","Factory","transient","definition","register","factory","main","notify","success","error","warning","_title","_message","_onok","onok","setMessage","label","returnValue","autoConfirm","duration","task","clearAutoConfirm","clearInterval","startAutoConfirm","setInterval","_oncancel","oncancel","labels","defaultFocus","reverseButtons","autoOk","autoCancel","p","_value","module","exports","define","amd"],"sourceRoot":"webpack:///","sources":["node_modules\\alertifyjs\\build\\alertify.js"],"sourcesContent":["/**\r\n * alertifyjs 1.13.1 http://alertifyjs.com\r\n * AlertifyJS is a javascript framework for developing pretty browser dialogs and notifications.\r\n * Copyright 2019 Mohammad Younes <Mohammad@alertifyjs.com> (http://alertifyjs.com) \r\n * Licensed under GPL 3 <https://opensource.org/licenses/gpl-3.0>*/\r\n( function ( window ) {\r\n    'use strict';\r\n    var NOT_DISABLED_NOT_RESET = ':not(:disabled):not(.ajs-reset)';\r\n    /**\r\n     * Keys enum\r\n     * @type {Object}\r\n     */\r\n    var keys = {\r\n        ENTER: 13,\r\n        ESC: 27,\r\n        F1: 112,\r\n        F12: 123,\r\n        LEFT: 37,\r\n        RIGHT: 39,\r\n        TAB: 9\r\n    };\r\n    /**\r\n     * Default options \r\n     * @type {Object}\r\n     */\r\n    var defaults = {\r\n        autoReset:true,\r\n        basic:false,\r\n        closable:true,\r\n        closableByDimmer:true,\r\n        invokeOnCloseOff:false,\r\n        frameless:false,\r\n        defaultFocusOff:false,\r\n        maintainFocus:true, //global default not per instance, applies to all dialogs\r\n        maximizable:true,\r\n        modal:true,\r\n        movable:true,\r\n        moveBounded:false,\r\n        overflow:true,\r\n        padding: true,\r\n        pinnable:true,\r\n        pinned:true,\r\n        preventBodyShift:false, //global default not per instance, applies to all dialogs\r\n        resizable:true,\r\n        startMaximized:false,\r\n        transition:'pulse',\r\n        transitionOff:false,\r\n        tabbable:['button', '[href]', 'input', 'select', 'textarea', '[tabindex]:not([tabindex^=\"-\"])'+NOT_DISABLED_NOT_RESET].join(NOT_DISABLED_NOT_RESET+','),//global\r\n        notifier:{\r\n            delay:5,\r\n            position:'bottom-right',\r\n            closeButton:false,\r\n            classes: {\r\n                base: 'alertify-notifier',\r\n                prefix:'ajs-',\r\n                message: 'ajs-message',\r\n                top: 'ajs-top',\r\n                right: 'ajs-right',\r\n                bottom: 'ajs-bottom',\r\n                left: 'ajs-left',\r\n                center: 'ajs-center',\r\n                visible: 'ajs-visible',\r\n                hidden: 'ajs-hidden',\r\n                close: 'ajs-close'\r\n            }\r\n        },\r\n        glossary:{\r\n            title:'AlertifyJS',\r\n            ok: 'OK',\r\n            cancel: 'Cancel',\r\n            acccpt: 'Accept',\r\n            deny: 'Deny',\r\n            confirm: 'Confirm',\r\n            decline: 'Decline',\r\n            close: 'Close',\r\n            maximize: 'Maximize',\r\n            restore: 'Restore',\r\n        },\r\n        theme:{\r\n            input:'ajs-input',\r\n            ok:'ajs-ok',\r\n            cancel:'ajs-cancel',\r\n        },\r\n        hooks:{\r\n            preinit:function(){},\r\n            postinit:function(){}\r\n        }\r\n    };\r\n    \r\n    //holds open dialogs instances\r\n    var openDialogs = [];\r\n\r\n    /**\r\n     * [Helper]  Adds the specified class(es) to the element.\r\n     *\r\n     * @element {node}      The element\r\n     * @className {string}  One or more space-separated classes to be added to the class attribute of the element.\r\n     * \r\n     * @return {undefined}\r\n     */\r\n    function addClass(element,classNames){\r\n        element.className += ' ' + classNames;\r\n    }\r\n    \r\n    /**\r\n     * [Helper]  Removes the specified class(es) from the element.\r\n     *\r\n     * @element {node}      The element\r\n     * @className {string}  One or more space-separated classes to be removed from the class attribute of the element.\r\n     * \r\n     * @return {undefined}\r\n     */\r\n    function removeClass(element, classNames) {\r\n        var original = element.className.split(' ');\r\n        var toBeRemoved = classNames.split(' ');\r\n        for (var x = 0; x < toBeRemoved.length; x += 1) {\r\n            var index = original.indexOf(toBeRemoved[x]);\r\n            if (index > -1){\r\n                original.splice(index,1);\r\n            }\r\n        }\r\n        element.className = original.join(' ');\r\n    }\r\n\r\n    /**\r\n     * [Helper]  Checks if the document is RTL\r\n     *\r\n     * @return {Boolean} True if the document is RTL, false otherwise.\r\n     */\r\n    function isRightToLeft(){\r\n        return window.getComputedStyle(document.body).direction === 'rtl';\r\n    }\r\n    /**\r\n     * [Helper]  Get the document current scrollTop\r\n     *\r\n     * @return {Number} current document scrollTop value\r\n     */\r\n    function getScrollTop(){\r\n        return ((document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop);\r\n    }\r\n\r\n    /**\r\n     * [Helper]  Get the document current scrollLeft\r\n     *\r\n     * @return {Number} current document scrollLeft value\r\n     */\r\n    function getScrollLeft(){\r\n        return ((document.documentElement && document.documentElement.scrollLeft) || document.body.scrollLeft);\r\n    }\r\n\r\n    /**\r\n    * Helper: clear contents\r\n    *\r\n    */\r\n    function clearContents(element){\r\n        while (element.lastChild) {\r\n            element.removeChild(element.lastChild);\r\n        }\r\n    }\r\n    /**\r\n     * Extends a given prototype by merging properties from base into sub.\r\n     *\r\n     * @sub {Object} sub The prototype being overwritten.\r\n     * @base {Object} base The prototype being written.\r\n     *\r\n     * @return {Object} The extended prototype.\r\n     */\r\n    function copy(src) {\r\n        if(null === src){\r\n            return src;\r\n        }\r\n        var cpy;\r\n        if(Array.isArray(src)){\r\n            cpy = [];\r\n            for(var x=0;x<src.length;x+=1){\r\n                cpy.push(copy(src[x]));\r\n            }\r\n            return cpy;\r\n        }\r\n      \r\n        if(src instanceof Date){\r\n            return new Date(src.getTime());\r\n        }\r\n      \r\n        if(src instanceof RegExp){\r\n            cpy = new RegExp(src.source);\r\n            cpy.global = src.global;\r\n            cpy.ignoreCase = src.ignoreCase;\r\n            cpy.multiline = src.multiline;\r\n            cpy.lastIndex = src.lastIndex;\r\n            return cpy;\r\n        }\r\n        \r\n        if(typeof src === 'object'){\r\n            cpy = {};\r\n            // copy dialog pototype over definition.\r\n            for (var prop in src) {\r\n                if (src.hasOwnProperty(prop)) {\r\n                    cpy[prop] = copy(src[prop]);\r\n                }\r\n            }\r\n            return cpy;\r\n        }\r\n        return src;\r\n    }\r\n    /**\r\n      * Helper: destruct the dialog\r\n      *\r\n      */\r\n    function destruct(instance, initialize){\r\n        if(instance.elements){\r\n            //delete the dom and it's references.\r\n            var root = instance.elements.root;\r\n            root.parentNode.removeChild(root);\r\n            delete instance.elements;\r\n            //copy back initial settings.\r\n            instance.settings = copy(instance.__settings);\r\n            //re-reference init function.\r\n            instance.__init = initialize;\r\n            //delete __internal variable to allow re-initialization.\r\n            delete instance.__internal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test to check if passive event listeners are supported.\r\n     */\r\n    var IsPassiveSupported = false;\r\n    try {\r\n        var options = Object.defineProperty({}, 'passive', {\r\n            get: function () {\r\n                IsPassiveSupported = true;\r\n            }\r\n        });\r\n        window.addEventListener('test', options, options);\r\n        window.removeEventListener('test', options, options);\r\n    } catch (e) {}\r\n\r\n     /**\r\n     * Removes an event listener\r\n     *\r\n     * @param {HTMLElement} el The EventTarget to register the listenr on.\r\n     * @param {string} event The event type to listen for.\r\n     * @param {Function} handler The function to handle the event.\r\n     * @param {boolean} useCapture Specifices if the event to be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.\r\n     * @param {boolean} passive A Boolean which, if true, indicates that the function specified by listener will never call preventDefault().\r\n     */\r\n    var on = function (el, event, fn, useCapture, passive) {\r\n        el.addEventListener(event, fn, IsPassiveSupported ? { capture: useCapture, passive: passive } : useCapture === true);\r\n    };\r\n\r\n    /**\r\n     * Removes an event listener\r\n     *\r\n     * @param {HTMLElement} el The EventTarget to unregister the listenr from.\r\n     * @param {string} event The event type to remove.\r\n     * @param {Function} fn The event handler to remove.\r\n     * @param {boolean} useCapture Specifices if the event to be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.\r\n     * @param {boolean} passive A Boolean which, if true, indicates that the function specified by listener will never call preventDefault().\r\n     */\r\n    var off = function (el, event, fn, useCapture, passive) {\r\n        el.removeEventListener(event, fn, IsPassiveSupported ? { capture: useCapture, passive: passive } : useCapture === true);\r\n    };\r\n\r\n    /**\r\n     * Prevent default event from firing\r\n     *\r\n     * @param  {Event} event Event object\r\n     * @return {undefined}\r\n\r\n    function prevent ( event ) {\r\n        if ( event ) {\r\n            if ( event.preventDefault ) {\r\n                event.preventDefault();\r\n            } else {\r\n                event.returnValue = false;\r\n            }\r\n        }\r\n    }\r\n    */\r\n    var transition = (function () {\r\n        var t, type;\r\n        var supported = false;\r\n        var transitions = {\r\n            'animation'        : 'animationend',\r\n            'OAnimation'       : 'oAnimationEnd oanimationend',\r\n            'msAnimation'      : 'MSAnimationEnd',\r\n            'MozAnimation'     : 'animationend',\r\n            'WebkitAnimation'  : 'webkitAnimationEnd'\r\n        };\r\n\r\n        for (t in transitions) {\r\n            if (document.documentElement.style[t] !== undefined) {\r\n                type = transitions[t];\r\n                supported = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return {\r\n            type: type,\r\n            supported: supported\r\n        };\r\n    }());\r\n\r\n    /**\r\n    * Creates event handler delegate that sends the instance as last argument.\r\n    * \r\n    * @return {Function}    a function wrapper which sends the instance as last argument.\r\n    */\r\n    function delegate(context, method) {\r\n        return function () {\r\n            if (arguments.length > 0) {\r\n                var args = [];\r\n                for (var x = 0; x < arguments.length; x += 1) {\r\n                    args.push(arguments[x]);\r\n                }\r\n                args.push(context);\r\n                return method.apply(context, args);\r\n            }\r\n            return method.apply(context, [null, context]);\r\n        };\r\n    }\r\n    /**\r\n    * Helper for creating a dialog close event.\r\n    * \r\n    * @return {object}\r\n    */\r\n    function createCloseEvent(index, button) {\r\n        return {\r\n            index: index,\r\n            button: button,\r\n            cancel: false\r\n        };\r\n    }\r\n    /**\r\n    * Helper for dispatching events.\r\n    *\r\n    * @param  {string} evenType The type of the event to disptach.\r\n    * @param  {object} instance The dialog instance disptaching the event.\r\n    *\r\n    * @return   {any}   The result of the invoked function.\r\n    */\r\n    function dispatchEvent(eventType, instance) {\r\n        if ( typeof instance.get(eventType) === 'function' ) {\r\n            return instance.get(eventType).call(instance);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Super class for all dialogs\r\n     *\r\n     * @return {Object}\t\tbase dialog prototype\r\n     */\r\n    var dialog = (function () {\r\n        var //holds the list of used keys.\r\n            usedKeys = [],\r\n            //dummy variable, used to trigger dom reflow.\r\n            reflow = null,\r\n            //holds body tab index in case it has any.\r\n            tabindex = false,\r\n            //condition for detecting safari\r\n            isSafari = window.navigator.userAgent.indexOf('Safari') > -1 && window.navigator.userAgent.indexOf('Chrome') < 0,\r\n            //dialog building blocks\r\n            templates = {\r\n                dimmer:'<div class=\"ajs-dimmer\"></div>',\r\n                /*tab index required to fire click event before body focus*/\r\n                modal: '<div class=\"ajs-modal\" tabindex=\"0\"></div>',\r\n                dialog: '<div class=\"ajs-dialog\" tabindex=\"0\"></div>',\r\n                reset: '<button class=\"ajs-reset\"></button>',\r\n                commands: '<div class=\"ajs-commands\"><button class=\"ajs-pin\"></button><button class=\"ajs-maximize\"></button><button class=\"ajs-close\"></button></div>',\r\n                header: '<div class=\"ajs-header\"></div>',\r\n                body: '<div class=\"ajs-body\"></div>',\r\n                content: '<div class=\"ajs-content\"></div>',\r\n                footer: '<div class=\"ajs-footer\"></div>',\r\n                buttons: { primary: '<div class=\"ajs-primary ajs-buttons\"></div>', auxiliary: '<div class=\"ajs-auxiliary ajs-buttons\"></div>' },\r\n                button: '<button class=\"ajs-button\"></button>',\r\n                resizeHandle: '<div class=\"ajs-handle\"></div>',\r\n            },\r\n            //common class names\r\n            classes = {\r\n                animationIn: 'ajs-in',\r\n                animationOut: 'ajs-out',\r\n                base: 'alertify',\r\n                basic:'ajs-basic',\r\n                capture: 'ajs-capture',\r\n                closable:'ajs-closable',\r\n                fixed: 'ajs-fixed',\r\n                frameless:'ajs-frameless',\r\n                hidden: 'ajs-hidden',\r\n                maximize: 'ajs-maximize',\r\n                maximized: 'ajs-maximized',\r\n                maximizable:'ajs-maximizable',\r\n                modeless: 'ajs-modeless',\r\n                movable: 'ajs-movable',\r\n                noSelection: 'ajs-no-selection',\r\n                noOverflow: 'ajs-no-overflow',\r\n                noPadding:'ajs-no-padding',\r\n                pin:'ajs-pin',\r\n                pinnable:'ajs-pinnable',\r\n                prefix: 'ajs-',\r\n                resizable: 'ajs-resizable',\r\n                restore: 'ajs-restore',\r\n                shake:'ajs-shake',\r\n                unpinned:'ajs-unpinned',\r\n                noTransition:'ajs-no-transition'\r\n            };\r\n\r\n        /**\r\n         * Helper: initializes the dialog instance\r\n         * \r\n         * @return\t{Number}\tThe total count of currently open modals.\r\n         */\r\n        function initialize(instance){\r\n            \r\n            if(!instance.__internal){\r\n                //invoke preinit global hook\r\n                alertify.defaults.hooks.preinit(instance);\r\n                //no need to expose init after this.\r\n                delete instance.__init;\r\n              \r\n                //keep a copy of initial dialog settings\r\n                if(!instance.__settings){\r\n                    instance.__settings = copy(instance.settings);\r\n                }\r\n                \r\n                //get dialog buttons/focus setup\r\n                var setup;\r\n                if(typeof instance.setup === 'function'){\r\n                    setup = instance.setup();\r\n                    setup.options = setup.options  || {};\r\n                    setup.focus = setup.focus  || {};\r\n                }else{\r\n                    setup = {\r\n                        buttons:[],\r\n                        focus:{\r\n                            element:null,\r\n                            select:false\r\n                        },\r\n                        options:{\r\n                        }\r\n                    };\r\n                }\r\n                \r\n                //initialize hooks object.\r\n                if(typeof instance.hooks !== 'object'){\r\n                    instance.hooks = {};\r\n                }\r\n\r\n                //copy buttons defintion\r\n                var buttonsDefinition = [];\r\n                if(Array.isArray(setup.buttons)){\r\n                    for(var b=0;b<setup.buttons.length;b+=1){\r\n                        var ref  = setup.buttons[b],\r\n                            cpy = {};\r\n                        for (var i in ref) {\r\n                            if (ref.hasOwnProperty(i)) {\r\n                                cpy[i] = ref[i];\r\n                            }\r\n                        }\r\n                        buttonsDefinition.push(cpy);\r\n                    }\r\n                }\r\n\r\n                var internal = instance.__internal = {\r\n                    /**\r\n                     * Flag holding the open state of the dialog\r\n                     * \r\n                     * @type {Boolean}\r\n                     */\r\n                    isOpen:false,\r\n                    /**\r\n                     * Active element is the element that will receive focus after\r\n                     * closing the dialog. It defaults as the body tag, but gets updated\r\n                     * to the last focused element before the dialog was opened.\r\n                     *\r\n                     * @type {Node}\r\n                     */\r\n                    activeElement:document.body,\r\n                    timerIn:undefined,\r\n                    timerOut:undefined,\r\n                    buttons: buttonsDefinition,\r\n                    focus: setup.focus,\r\n                    options: {\r\n                        title: undefined,\r\n                        modal: undefined,\r\n                        basic:undefined,\r\n                        frameless:undefined,\r\n                        defaultFocusOff:undefined,\r\n                        pinned: undefined,\r\n                        movable: undefined,\r\n                        moveBounded:undefined,\r\n                        resizable: undefined,\r\n                        autoReset: undefined,\r\n                        closable: undefined,\r\n                        closableByDimmer: undefined,\r\n                        invokeOnCloseOff:undefined,\r\n                        maximizable: undefined,\r\n                        startMaximized: undefined,\r\n                        pinnable: undefined,\r\n                        transition: undefined,\r\n                        transitionOff: undefined,\r\n                        padding:undefined,\r\n                        overflow:undefined,\r\n                        onshow:undefined,\r\n                        onclosing:undefined,\r\n                        onclose:undefined,\r\n                        onfocus:undefined,\r\n                        onmove:undefined,\r\n                        onmoved:undefined,\r\n                        onresize:undefined,\r\n                        onresized:undefined,\r\n                        onmaximize:undefined,\r\n                        onmaximized:undefined,\r\n                        onrestore:undefined,\r\n                        onrestored:undefined\r\n                    },\r\n                    resetHandler:undefined,\r\n                    beginMoveHandler:undefined,\r\n                    beginResizeHandler:undefined,\r\n                    bringToFrontHandler:undefined,\r\n                    modalClickHandler:undefined,\r\n                    buttonsClickHandler:undefined,\r\n                    commandsClickHandler:undefined,\r\n                    transitionInHandler:undefined,\r\n                    transitionOutHandler:undefined,\r\n                    destroy:undefined\r\n                };\r\n\r\n                var elements = {};\r\n                //root node\r\n                elements.root = document.createElement('div');\r\n                //prevent FOUC in case of async styles loading.\r\n                elements.root.style.display = 'none';\r\n                elements.root.className = classes.base + ' ' + classes.hidden + ' ';\r\n\r\n                elements.root.innerHTML = templates.dimmer + templates.modal;\r\n                \r\n                //dimmer\r\n                elements.dimmer = elements.root.firstChild;\r\n\r\n                //dialog\r\n                elements.modal = elements.root.lastChild;\r\n                elements.modal.innerHTML = templates.dialog;\r\n                elements.dialog = elements.modal.firstChild;\r\n                elements.dialog.innerHTML = templates.reset + templates.commands + templates.header + templates.body + templates.footer + templates.resizeHandle + templates.reset;\r\n\r\n                //reset links\r\n                elements.reset = [];\r\n                elements.reset.push(elements.dialog.firstChild);\r\n                elements.reset.push(elements.dialog.lastChild);\r\n                \r\n                //commands\r\n                elements.commands = {};\r\n                elements.commands.container = elements.reset[0].nextSibling;\r\n                elements.commands.pin = elements.commands.container.firstChild;\r\n                elements.commands.maximize = elements.commands.pin.nextSibling;\r\n                elements.commands.close = elements.commands.maximize.nextSibling;\r\n                \r\n                //header\r\n                elements.header = elements.commands.container.nextSibling;\r\n\r\n                //body\r\n                elements.body = elements.header.nextSibling;\r\n                elements.body.innerHTML = templates.content;\r\n                elements.content = elements.body.firstChild;\r\n\r\n                //footer\r\n                elements.footer = elements.body.nextSibling;\r\n                elements.footer.innerHTML = templates.buttons.auxiliary + templates.buttons.primary;\r\n                \r\n                //resize handle\r\n                elements.resizeHandle = elements.footer.nextSibling;\r\n\r\n                //buttons\r\n                elements.buttons = {};\r\n                elements.buttons.auxiliary = elements.footer.firstChild;\r\n                elements.buttons.primary = elements.buttons.auxiliary.nextSibling;\r\n                elements.buttons.primary.innerHTML = templates.button;\r\n                elements.buttonTemplate = elements.buttons.primary.firstChild;\r\n                //remove button template\r\n                elements.buttons.primary.removeChild(elements.buttonTemplate);\r\n                               \r\n                for(var x=0; x < instance.__internal.buttons.length; x+=1) {\r\n                    var button = instance.__internal.buttons[x];\r\n                    \r\n                    // add to the list of used keys.\r\n                    if(usedKeys.indexOf(button.key) < 0){\r\n                        usedKeys.push(button.key);\r\n                    }\r\n\r\n                    button.element = elements.buttonTemplate.cloneNode();\r\n                    button.element.innerHTML = button.text;\r\n                    if(typeof button.className === 'string' &&  button.className !== ''){\r\n                        addClass(button.element, button.className);\r\n                    }\r\n                    for(var key in button.attrs){\r\n                        if(key !== 'className' && button.attrs.hasOwnProperty(key)){\r\n                            button.element.setAttribute(key, button.attrs[key]);\r\n                        }\r\n                    }\r\n                    if(button.scope === 'auxiliary'){\r\n                        elements.buttons.auxiliary.appendChild(button.element);\r\n                    }else{\r\n                        elements.buttons.primary.appendChild(button.element);\r\n                    }\r\n                }\r\n                //make elements pubic\r\n                instance.elements = elements;\r\n                \r\n                //save event handlers delegates\r\n                internal.resetHandler = delegate(instance, onReset);\r\n                internal.beginMoveHandler = delegate(instance, beginMove);\r\n                internal.beginResizeHandler = delegate(instance, beginResize);\r\n                internal.bringToFrontHandler = delegate(instance, bringToFront);\r\n                internal.modalClickHandler = delegate(instance, modalClickHandler);\r\n                internal.buttonsClickHandler = delegate(instance, buttonsClickHandler);\r\n                internal.commandsClickHandler = delegate(instance, commandsClickHandler);\r\n                internal.transitionInHandler = delegate(instance, handleTransitionInEvent);\r\n                internal.transitionOutHandler = delegate(instance, handleTransitionOutEvent);\r\n\r\n                //settings\r\n                for(var opKey in internal.options){\r\n                    if(setup.options[opKey] !== undefined){\r\n                        // if found in user options\r\n                        instance.set(opKey, setup.options[opKey]);\r\n                    }else if(alertify.defaults.hasOwnProperty(opKey)) {\r\n                        // else if found in defaults options\r\n                        instance.set(opKey, alertify.defaults[opKey]);\r\n                    }else if(opKey === 'title' ) {\r\n                        // else if title key, use alertify.defaults.glossary\r\n                        instance.set(opKey, alertify.defaults.glossary[opKey]);\r\n                    }\r\n                }\r\n\r\n                // allow dom customization\r\n                if(typeof instance.build === 'function'){\r\n                    instance.build();\r\n                }\r\n\r\n                //invoke postinit global hook\r\n                alertify.defaults.hooks.postinit(instance);\r\n            }\r\n\r\n            //add to the end of the DOM tree.\r\n            document.body.appendChild(instance.elements.root);\r\n        }\r\n\r\n        /**\r\n         * Helper: maintains scroll position\r\n         *\r\n         */\r\n        var scrollX, scrollY;\r\n        function saveScrollPosition(){\r\n            scrollX = getScrollLeft();\r\n            scrollY = getScrollTop();\r\n        }\r\n        function restoreScrollPosition(){\r\n            window.scrollTo(scrollX, scrollY);\r\n        }\r\n\r\n        /**\r\n         * Helper: adds/removes no-overflow class from body\r\n         *\r\n         */\r\n        function ensureNoOverflow(){\r\n            var requiresNoOverflow = 0;\r\n            for(var x=0;x<openDialogs.length;x+=1){\r\n                var instance = openDialogs[x];\r\n                if(instance.isModal() || instance.isMaximized()){\r\n                    requiresNoOverflow+=1;\r\n                }\r\n            }\r\n            if(requiresNoOverflow === 0 && document.body.className.indexOf(classes.noOverflow) >= 0){\r\n                //last open modal or last maximized one\r\n                removeClass(document.body, classes.noOverflow);\r\n                preventBodyShift(false);\r\n            }else if(requiresNoOverflow > 0 && document.body.className.indexOf(classes.noOverflow) < 0){\r\n                //first open modal or first maximized one\r\n                preventBodyShift(true);\r\n                addClass(document.body, classes.noOverflow);\r\n            }\r\n        }\r\n        var top = '', topScroll = 0;\r\n        /**\r\n         * Helper: prevents body shift.\r\n         *\r\n         */\r\n        function preventBodyShift(add){\r\n            if(alertify.defaults.preventBodyShift){\r\n                if(add && document.documentElement.scrollHeight > document.documentElement.clientHeight ){//&& openDialogs[openDialogs.length-1].elements.dialog.clientHeight <= document.documentElement.clientHeight){\r\n                    topScroll = scrollY;\r\n                    top = window.getComputedStyle(document.body).top;\r\n                    addClass(document.body, classes.fixed);\r\n                    document.body.style.top = -scrollY + 'px';\r\n                } else if(!add) {\r\n                    scrollY = topScroll;\r\n                    document.body.style.top = top;\r\n                    removeClass(document.body, classes.fixed);\r\n                    restoreScrollPosition();\r\n                }\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Sets the name of the transition used to show/hide the dialog\r\n         * \r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         */\r\n        function updateTransition(instance, value, oldValue){\r\n            if(typeof oldValue === 'string'){\r\n                removeClass(instance.elements.root,classes.prefix +  oldValue);\r\n            }\r\n            addClass(instance.elements.root, classes.prefix + value);\r\n            reflow = instance.elements.root.offsetWidth;\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog no transition \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateTransitionOff(instance){\r\n            if (instance.get('transitionOff')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.noTransition);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.noTransition);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog display mode\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateDisplayMode(instance){\r\n            if(instance.get('modal')){\r\n\r\n                //make modal\r\n                removeClass(instance.elements.root, classes.modeless);\r\n\r\n                //only if open\r\n                if(instance.isOpen()){\r\n                    unbindModelessEvents(instance);\r\n\r\n                    //in case a pinned modless dialog was made modal while open.\r\n                    updateAbsPositionFix(instance);\r\n\r\n                    ensureNoOverflow();\r\n                }\r\n            }else{\r\n                //make modelss\r\n                addClass(instance.elements.root, classes.modeless);\r\n\r\n                //only if open\r\n                if(instance.isOpen()){\r\n                    bindModelessEvents(instance);\r\n\r\n                    //in case pin/unpin was called while a modal is open\r\n                    updateAbsPositionFix(instance);\r\n\r\n                    ensureNoOverflow();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog basic view mode \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateBasicMode(instance){\r\n            if (instance.get('basic')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.basic);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.basic);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog frameless view mode \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateFramelessMode(instance){\r\n            if (instance.get('frameless')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.frameless);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.frameless);\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: Brings the modeless dialog to front, attached to modeless dialogs.\r\n         *\r\n         * @param {Event} event Focus event\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bringToFront(event, instance){\r\n            \r\n            // Do not bring to front if preceeded by an open modal\r\n            var index = openDialogs.indexOf(instance);\r\n            for(var x=index+1;x<openDialogs.length;x+=1){\r\n                if(openDialogs[x].isModal()){\r\n                    return;\r\n                }\r\n            }\r\n\t\t\t\r\n            // Bring to front by making it the last child.\r\n            if(document.body.lastChild !== instance.elements.root){\r\n                document.body.appendChild(instance.elements.root);\r\n                //also make sure its at the end of the list\r\n                openDialogs.splice(openDialogs.indexOf(instance),1);\r\n                openDialogs.push(instance);\r\n                setFocus(instance);\r\n            }\r\n\t\t\t\r\n            return false;\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: reflects dialogs options updates\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {String} option The updated option name.\r\n         *\r\n         * @return\t{undefined}\t\r\n         */\r\n        function optionUpdated(instance, option, oldValue, newValue){\r\n            switch(option){\r\n            case 'title':\r\n                instance.setHeader(newValue);\r\n                break;\r\n            case 'modal':\r\n                updateDisplayMode(instance);\r\n                break;\r\n            case 'basic':\r\n                updateBasicMode(instance);\r\n                break;\r\n            case 'frameless':\r\n                updateFramelessMode(instance);\r\n                break;\r\n            case 'pinned':\r\n                updatePinned(instance);\r\n                break;\r\n            case 'closable':\r\n                updateClosable(instance);\r\n                break;\r\n            case 'maximizable':\r\n                updateMaximizable(instance);\r\n                break;\r\n            case 'pinnable':\r\n                updatePinnable(instance);\r\n                break;\r\n            case 'movable':\r\n                updateMovable(instance);\r\n                break;\r\n            case 'resizable':\r\n                updateResizable(instance);\r\n                break;\r\n            case 'padding':\r\n                if(newValue){\r\n                    removeClass(instance.elements.root, classes.noPadding);\r\n                }else if(instance.elements.root.className.indexOf(classes.noPadding) < 0){\r\n                    addClass(instance.elements.root, classes.noPadding);\r\n                }\r\n                break;\r\n            case 'overflow':\r\n                if(newValue){\r\n                    removeClass(instance.elements.root, classes.noOverflow);\r\n                }else if(instance.elements.root.className.indexOf(classes.noOverflow) < 0){\r\n                    addClass(instance.elements.root, classes.noOverflow);\r\n                }\r\n                break;\r\n            case 'transition':\r\n                updateTransition(instance,newValue, oldValue);\r\n                break;\r\n            case 'transitionOff':\r\n                updateTransitionOff(instance);\r\n                break;\r\n            }\r\n\r\n            // internal on option updated event\r\n            if(typeof instance.hooks.onupdate === 'function'){\r\n                instance.hooks.onupdate.call(instance, option, oldValue, newValue);\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: reflects dialogs options updates\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Object} obj The object to set/get a value on/from.\r\n         * @param {Function} callback The callback function to call if the key was found.\r\n         * @param {String|Object} key A string specifying a propery name or a collection of key value pairs.\r\n         * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n         * @param {String} option The updated option name.\r\n         *\r\n         * @return\t{Object} result object \r\n         *\tThe result objects has an 'op' property, indicating of this is a SET or GET operation.\r\n         *\t\tGET: \r\n         *\t\t- found: a flag indicating if the key was found or not.\r\n         *\t\t- value: the property value.\r\n         *\t\tSET:\r\n         *\t\t- items: a list of key value pairs of the properties being set.\r\n         *\t\t\t\teach contains:\r\n         *\t\t\t\t\t- found: a flag indicating if the key was found or not.\r\n         *\t\t\t\t\t- key: the property key.\r\n         *\t\t\t\t\t- value: the property value.\r\n         */\r\n        function update(instance, obj, callback, key, value){\r\n            var result = {op:undefined, items: [] };\r\n            if(typeof value === 'undefined' && typeof key === 'string') {\r\n                //get\r\n                result.op = 'get';\r\n                if(obj.hasOwnProperty(key)){\r\n                    result.found = true;\r\n                    result.value = obj[key];\r\n                }else{\r\n                    result.found = false;\r\n                    result.value = undefined;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                var old;\r\n                //set\r\n                result.op = 'set';\r\n                if(typeof key === 'object'){\r\n                    //set multiple\r\n                    var args = key;\r\n                    for (var prop in args) {\r\n                        if (obj.hasOwnProperty(prop)) {\r\n                            if(obj[prop] !== args[prop]){\r\n                                old = obj[prop];\r\n                                obj[prop] = args[prop];\r\n                                callback.call(instance,prop, old, args[prop]);\r\n                            }\r\n                            result.items.push({ 'key': prop, 'value': args[prop], 'found':true});\r\n                        }else{\r\n                            result.items.push({ 'key': prop, 'value': args[prop], 'found':false});\r\n                        }\r\n                    }\r\n                } else if (typeof key === 'string'){\r\n                    //set single\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        if(obj[key] !== value){\r\n                            old  = obj[key];\r\n                            obj[key] = value;\r\n                            callback.call(instance,key, old, value);\r\n                        }\r\n                        result.items.push({'key': key, 'value': value , 'found':true});\r\n\r\n                    }else{\r\n                        result.items.push({'key': key, 'value': value , 'found':false});\r\n                    }\r\n                } else {\r\n                    //invalid params\r\n                    throw new Error('args must be a string or object');\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n\r\n        /**\r\n         * Triggers a close event.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function triggerClose(instance) {\r\n            var found;\r\n            triggerCallback(instance, function (button) {\r\n                return found = instance.get('invokeOnCloseOff') !== true && (button.invokeOnClose === true);\r\n            });\r\n            //none of the buttons registered as onclose callback\r\n            //close the dialog\r\n            if (!found && instance.isOpen()) {\r\n                instance.close();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Dialogs commands event handler, attached to the dialog commands element.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function commandsClickHandler(event, instance) {\r\n            var target = event.srcElement || event.target;\r\n            switch (target) {\r\n            case instance.elements.commands.pin:\r\n                if (!instance.isPinned()) {\r\n                    pin(instance);\r\n                } else {\r\n                    unpin(instance);\r\n                }\r\n                break;\r\n            case instance.elements.commands.maximize:\r\n                if (!instance.isMaximized()) {\r\n                    maximize(instance);\r\n                } else {\r\n                    restore(instance);\r\n                }\r\n                break;\r\n            case instance.elements.commands.close:\r\n                triggerClose(instance);\r\n                break;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Helper: pins the modeless dialog.\r\n         *\r\n         * @param {Object} instance\tThe dialog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function pin(instance) {\r\n            //pin the dialog\r\n            instance.set('pinned', true);\r\n        }\r\n\r\n        /**\r\n         * Helper: unpins the modeless dialog.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function unpin(instance) {\r\n            //unpin the dialog \r\n            instance.set('pinned', false);\r\n        }\r\n\r\n\r\n        /**\r\n         * Helper: enlarges the dialog to fill the entire screen.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function maximize(instance) {\r\n            // allow custom `onmaximize` method\r\n            dispatchEvent('onmaximize', instance);\r\n            //maximize the dialog \r\n            addClass(instance.elements.root, classes.maximized);\r\n            if (instance.isOpen()) {\r\n                ensureNoOverflow();\r\n            }\r\n            // allow custom `onmaximized` method\r\n            dispatchEvent('onmaximized', instance);\r\n        }\r\n\r\n        /**\r\n         * Helper: returns the dialog to its former size.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function restore(instance) {\r\n            // allow custom `onrestore` method\r\n            dispatchEvent('onrestore', instance);\r\n            //maximize the dialog \r\n            removeClass(instance.elements.root, classes.maximized);\r\n            if (instance.isOpen()) {\r\n                ensureNoOverflow();\r\n            }\r\n            // allow custom `onrestored` method\r\n            dispatchEvent('onrestored', instance);\r\n        }\r\n\r\n        /**\r\n         * Show or hide the maximize box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updatePinnable(instance) {\r\n            if (instance.get('pinnable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.pinnable);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.pinnable);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Helper: Fixes the absolutly positioned modal div position.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function addAbsPositionFix(instance) {\r\n            var scrollLeft = getScrollLeft();\r\n            instance.elements.modal.style.marginTop = getScrollTop() + 'px';\r\n            instance.elements.modal.style.marginLeft = scrollLeft + 'px';\r\n            instance.elements.modal.style.marginRight = (-scrollLeft) + 'px';\r\n        }\r\n\r\n        /**\r\n         * Helper: Removes the absolutly positioned modal div position fix.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function removeAbsPositionFix(instance) {\r\n            var marginTop = parseInt(instance.elements.modal.style.marginTop, 10);\r\n            var marginLeft = parseInt(instance.elements.modal.style.marginLeft, 10);\r\n            instance.elements.modal.style.marginTop = '';\r\n            instance.elements.modal.style.marginLeft = '';\r\n            instance.elements.modal.style.marginRight = '';\r\n\r\n            if (instance.isOpen()) {\r\n                var top = 0,\r\n                    left = 0\r\n                ;\r\n                if (instance.elements.dialog.style.top !== '') {\r\n                    top = parseInt(instance.elements.dialog.style.top, 10);\r\n                }\r\n                instance.elements.dialog.style.top = (top + (marginTop - getScrollTop())) + 'px';\r\n\r\n                if (instance.elements.dialog.style.left !== '') {\r\n                    left = parseInt(instance.elements.dialog.style.left, 10);\r\n                }\r\n                instance.elements.dialog.style.left = (left + (marginLeft - getScrollLeft())) + 'px';\r\n            }\r\n        }\r\n        /**\r\n         * Helper: Adds/Removes the absolutly positioned modal div position fix based on its pinned setting.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateAbsPositionFix(instance) {\r\n            // if modeless and unpinned add fix\r\n            if (!instance.get('modal') && !instance.get('pinned')) {\r\n                addAbsPositionFix(instance);\r\n            } else {\r\n                removeAbsPositionFix(instance);\r\n            }\r\n        }\r\n        /**\r\n         * Toggles the dialog position lock | modeless only.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to make it modal, false otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updatePinned(instance) {\r\n            if (instance.get('pinned')) {\r\n                removeClass(instance.elements.root, classes.unpinned);\r\n                if (instance.isOpen()) {\r\n                    removeAbsPositionFix(instance);\r\n                }\r\n            } else {\r\n                addClass(instance.elements.root, classes.unpinned);\r\n                if (instance.isOpen() && !instance.isModal()) {\r\n                    addAbsPositionFix(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Show or hide the maximize box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateMaximizable(instance) {\r\n            if (instance.get('maximizable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.maximizable);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.maximizable);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Show or hide the close box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateClosable(instance) {\r\n            if (instance.get('closable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.closable);\r\n                bindClosableEvents(instance);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.closable);\r\n                unbindClosableEvents(instance);\r\n            }\r\n        }\r\n\r\n        \r\n        var cancelClick = false,// flag to cancel click event if already handled by end resize event (the mousedown, mousemove, mouseup sequence fires a click event.).\r\n            modalClickHandlerTS=0 // stores last click timestamp to prevent executing the handler twice on double click.\r\n            ;\r\n\r\n        /**\r\n         * Helper: closes the modal dialog when clicking the modal\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function modalClickHandler(event, instance) {\r\n            if(event.timeStamp - modalClickHandlerTS > 200 && (modalClickHandlerTS = event.timeStamp) && !cancelClick){\r\n                var target = event.srcElement || event.target;\r\n                if (instance.get('closableByDimmer') === true && target === instance.elements.modal) {\r\n                    triggerClose(instance);\r\n                }\r\n            }\r\n            cancelClick = false;\r\n        }\r\n\r\n        // stores last call timestamp to prevent triggering the callback twice.\r\n        var callbackTS = 0;\r\n        // flag to cancel keyup event if already handled by click event (pressing Enter on a focusted button).\r\n        var cancelKeyup = false;\r\n        /** \r\n         * Helper: triggers a button callback\r\n         *\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * @param {Function}\tCallback to check which button triggered the event.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function triggerCallback(instance, check) {\r\n            if(Date.now() - callbackTS > 200 && (callbackTS = Date.now())){\r\n                for (var idx = 0; idx < instance.__internal.buttons.length; idx += 1) {\r\n                    var button = instance.__internal.buttons[idx];\r\n                    if (!button.element.disabled && check(button)) {\r\n                        var closeEvent = createCloseEvent(idx, button);\r\n                        if (typeof instance.callback === 'function') {\r\n                            instance.callback.apply(instance, [closeEvent]);\r\n                        }\r\n                        //close the dialog only if not canceled.\r\n                        if (closeEvent.cancel === false) {\r\n                            instance.close();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Clicks event handler, attached to the dialog footer.\r\n         *\r\n         * @param {Event}\t\tDOM event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function buttonsClickHandler(event, instance) {\r\n            var target = event.srcElement || event.target;\r\n            triggerCallback(instance, function (button) {\r\n                // if this button caused the click, cancel keyup event\r\n                return button.element === target && (cancelKeyup = true);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Keyup event handler, attached to the document.body\r\n         *\r\n         * @param {Event}\t\tDOM event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function keyupHandler(event) {\r\n            //hitting enter while button has focus will trigger keyup too.\r\n            //ignore if handled by clickHandler\r\n            if (cancelKeyup) {\r\n                cancelKeyup = false;\r\n                return;\r\n            }\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            var keyCode = event.keyCode;\r\n            if (instance.__internal.buttons.length === 0 && keyCode === keys.ESC && instance.get('closable') === true) {\r\n                triggerClose(instance);\r\n                return false;\r\n            }else if (usedKeys.indexOf(keyCode) > -1) {\r\n                triggerCallback(instance, function (button) {\r\n                    return button.key === keyCode;\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n        /**\r\n        * Keydown event handler, attached to the document.body\r\n        *\r\n        * @param {Event}\t\tDOM event object.\r\n        * @param {Object}\t\tThe dilog instance.\r\n        * \r\n        * @return {undefined}\r\n        */\r\n        function keydownHandler(event) {\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            var keyCode = event.keyCode;\r\n            if (keyCode === keys.LEFT || keyCode === keys.RIGHT) {\r\n                var buttons = instance.__internal.buttons;\r\n                for (var x = 0; x < buttons.length; x += 1) {\r\n                    if (document.activeElement === buttons[x].element) {\r\n                        switch (keyCode) {\r\n                        case keys.LEFT:\r\n                            buttons[(x || buttons.length) - 1].element.focus();\r\n                            return;\r\n                        case keys.RIGHT:\r\n                            buttons[(x + 1) % buttons.length].element.focus();\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }else if (keyCode < keys.F12 + 1 && keyCode > keys.F1 - 1 && usedKeys.indexOf(keyCode) > -1) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                triggerCallback(instance, function (button) {\r\n                    return button.key === keyCode;\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Sets focus to proper dialog element\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Node} [resetTarget=undefined] DOM element to reset focus to.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function setFocus(instance, resetTarget) {\r\n            // reset target has already been determined.\r\n            if (resetTarget) {\r\n                resetTarget.focus();\r\n            } else {\r\n                // current instance focus settings\r\n                var focus = instance.__internal.focus;\r\n                // the focus element.\r\n                var element = focus.element;\r\n\r\n                switch (typeof focus.element) {\r\n                // a number means a button index\r\n                case 'number':\r\n                    if (instance.__internal.buttons.length > focus.element) {\r\n                        //in basic view, skip focusing the buttons.\r\n                        if (instance.get('basic') === true) {\r\n                            element = instance.elements.reset[0];\r\n                        } else {\r\n                            element = instance.__internal.buttons[focus.element].element;\r\n                        }\r\n                    }\r\n                    break;\r\n                // a string means querySelector to select from dialog body contents.\r\n                case 'string':\r\n                    element = instance.elements.body.querySelector(focus.element);\r\n                    break;\r\n                // a function should return the focus element.\r\n                case 'function':\r\n                    element = focus.element.call(instance);\r\n                    break;\r\n                }\r\n\r\n                // if no focus element, default to first reset element.\r\n                if (instance.get('defaultFocusOff') === true || ((typeof element === 'undefined' || element === null) && instance.__internal.buttons.length === 0)) {\r\n                    element = instance.elements.reset[0];\r\n                }\r\n                // focus\r\n                if (element && element.focus) {\r\n                    element.focus();\r\n                    // if selectable\r\n                    if (focus.select && element.select) {\r\n                        element.select();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Focus event handler, attached to document.body and dialogs own reset links.\r\n         * handles the focus for modal dialogs only.\r\n         *\r\n         * @param {Event} event DOM focus event object.\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function onReset(event, instance) {\r\n\r\n            // should work on last modal if triggered from document.body \r\n            if (!instance) {\r\n                for (var x = openDialogs.length - 1; x > -1; x -= 1) {\r\n                    if (openDialogs[x].isModal()) {\r\n                        instance = openDialogs[x];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(instance) {\r\n                // if modal\r\n                if (instance.isModal()) {\r\n                    // determine reset target to enable forward/backward tab cycle.\r\n                    var firstReset = instance.elements.reset[0],\r\n                        lastReset = instance.elements.reset[1],\r\n                        lastFocusedElement = event.relatedTarget,\r\n                        within = instance.elements.root.contains(lastFocusedElement),\r\n                        target = event.srcElement || event.target,\r\n                        resetTarget;\r\n\r\n                    //if the previous focused element element was outside the modal do nthing\r\n                    if(  /*first show */\r\n                        (target === firstReset && !within) ||\r\n                         /*focus cycle */\r\n                        (target === lastReset && lastFocusedElement === firstReset)){\r\n                        return;\r\n                    }else if(target === lastReset || target === document.body){\r\n                        resetTarget = firstReset;\r\n                    }else if(target === firstReset && lastFocusedElement === lastReset){\r\n                        resetTarget = findTabbable(instance);\r\n                    }else if(target === firstReset && within){\r\n                        resetTarget = findTabbable(instance, true);\r\n                    }\r\n                    // focus\r\n                    setFocus(instance, resetTarget);\r\n                }\r\n            }\r\n        }\r\n        function findTabbable(instance, last){\r\n            var tabbables = [].slice.call(instance.elements.dialog.querySelectorAll(defaults.tabbable));\r\n            if(last){\r\n                tabbables.reverse();\r\n            }\r\n            for(var x=0;x<tabbables.length;x+=1){\r\n                var tabbable = tabbables[x];\r\n                //check if visible\r\n                if(!!(tabbable.offsetParent || tabbable.offsetWidth || tabbable.offsetHeight || tabbable.getClientRects().length)){\r\n                    return tabbable;\r\n                }\r\n            }\r\n        }\r\n        function recycleTab(event) {\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            if (instance && event.shiftKey && event.keyCode === keys.TAB) {\r\n                instance.elements.reset[1].focus();\r\n            }\r\n        }\r\n        /**\r\n         * Transition in transitionend event handler. \r\n         *\r\n         * @param {Event}\t\tTransitionEnd event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function handleTransitionInEvent(event, instance) {\r\n            // clear the timer\r\n            clearTimeout(instance.__internal.timerIn);\r\n\r\n            // once transition is complete, set focus\r\n            setFocus(instance);\r\n\r\n            // allow handling key up after transition ended.\r\n            cancelKeyup = false;\r\n\r\n            // allow custom `onfocus` method\r\n            dispatchEvent('onfocus', instance);\r\n\r\n            // unbind the event\r\n            off(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\r\n\r\n            removeClass(instance.elements.root, classes.animationIn);\r\n        }\r\n\r\n        /**\r\n         * Transition out transitionend event handler. \r\n         *\r\n         * @param {Event}\t\tTransitionEnd event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function handleTransitionOutEvent(event, instance) {\r\n            // clear the timer\r\n            clearTimeout(instance.__internal.timerOut);\r\n            // unbind the event\r\n            off(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\r\n\r\n            // reset move updates\r\n            resetMove(instance);\r\n            // reset resize updates\r\n            resetResize(instance);\r\n\r\n            // restore if maximized\r\n            if (instance.isMaximized() && !instance.get('startMaximized')) {\r\n                restore(instance);\r\n            }\r\n\r\n            //destory the instance\r\n            if (typeof instance.__internal.destroy === 'function') {\r\n                instance.__internal.destroy.apply(instance);\r\n            }\r\n        }\r\n        /* Controls moving a dialog around */\r\n        //holde the current moving instance\r\n        var movable = null,\r\n            //holds the current X offset when move starts\r\n            offsetX = 0,\r\n            //holds the current Y offset when move starts\r\n            offsetY = 0,\r\n            xProp = 'pageX',\r\n            yProp = 'pageY',\r\n            bounds = null,\r\n            refreshTop = false,\r\n            moveDelegate = null\r\n        ;\r\n\r\n        /**\r\n         * Helper: sets the element top/left coordinates\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Node} element The element being moved.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function moveElement(event, element) {\r\n            var left = (event[xProp] - offsetX),\r\n                top  = (event[yProp] - offsetY);\r\n\r\n            if(refreshTop){\r\n                top -= document.body.scrollTop;\r\n            }\r\n           \r\n            element.style.left = left + 'px';\r\n            element.style.top = top + 'px';\r\n           \r\n        }\r\n        /**\r\n         * Helper: sets the element top/left coordinates within screen bounds\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Node} element The element being moved.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function moveElementBounded(event, element) {\r\n            var left = (event[xProp] - offsetX),\r\n                top  = (event[yProp] - offsetY);\r\n\r\n            if(refreshTop){\r\n                top -= document.body.scrollTop;\r\n            }\r\n            \r\n            element.style.left = Math.min(bounds.maxLeft, Math.max(bounds.minLeft, left)) + 'px';\r\n            if(refreshTop){\r\n                element.style.top = Math.min(bounds.maxTop, Math.max(bounds.minTop, top)) + 'px';\r\n            }else{\r\n                element.style.top = Math.max(bounds.minTop, top) + 'px';\r\n            }\r\n        }\r\n            \r\n\r\n        /**\r\n         * Triggers the start of a move event, attached to the header element mouse down event.\r\n         * Adds no-selection class to the body, disabling selection while moving.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         * \r\n         * @return {Boolean} false\r\n         */\r\n        function beginMove(event, instance) {\r\n            if (resizable === null && !instance.isMaximized() && instance.get('movable')) {\r\n                var eventSrc, left=0, top=0;\r\n                if (event.type === 'touchstart') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                    xProp = 'clientX';\r\n                    yProp = 'clientY';\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n\r\n                if (eventSrc) {\r\n\r\n                    var element = instance.elements.dialog;\r\n                    addClass(element, classes.capture);\r\n\r\n                    if (element.style.left) {\r\n                        left = parseInt(element.style.left, 10);\r\n                    }\r\n\r\n                    if (element.style.top) {\r\n                        top = parseInt(element.style.top, 10);\r\n                    }\r\n                    \r\n                    offsetX = eventSrc[xProp] - left;\r\n                    offsetY = eventSrc[yProp] - top;\r\n\r\n                    if(instance.isModal()){\r\n                        offsetY += instance.elements.modal.scrollTop;\r\n                    }else if(instance.isPinned()){\r\n                        offsetY -= document.body.scrollTop;\r\n                    }\r\n                    \r\n                    if(instance.get('moveBounded')){\r\n                        var current = element,\r\n                            offsetLeft = -left,\r\n                            offsetTop = -top;\r\n                        \r\n                        //calc offset\r\n                        do {\r\n                            offsetLeft += current.offsetLeft;\r\n                            offsetTop += current.offsetTop;\r\n                        } while (current = current.offsetParent);\r\n                        \r\n                        bounds = {\r\n                            maxLeft : offsetLeft,\r\n                            minLeft : -offsetLeft,\r\n                            maxTop  : document.documentElement.clientHeight - element.clientHeight - offsetTop,\r\n                            minTop  : -offsetTop\r\n                        };\r\n                        moveDelegate = moveElementBounded;\r\n                    }else{\r\n                        bounds = null;\r\n                        moveDelegate = moveElement;\r\n                    }\r\n                    \r\n                    // allow custom `onmove` method\r\n                    dispatchEvent('onmove', instance);\r\n\r\n                    refreshTop = !instance.isModal() && instance.isPinned();\r\n                    movable = instance;\r\n                    moveDelegate(eventSrc, element);\r\n                    addClass(document.body, classes.noSelection);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The actual move handler,  attached to document.body mousemove event.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function move(event) {\r\n            if (movable) {\r\n                var eventSrc;\r\n                if (event.type === 'touchmove') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    moveDelegate(eventSrc, movable.elements.dialog);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the end of a move event,  attached to document.body mouseup event.\r\n         * Removes no-selection class from document.body, allowing selection.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function endMove() {\r\n            if (movable) {\r\n                var instance = movable;\r\n                movable = bounds = null;\r\n                removeClass(document.body, classes.noSelection);\r\n                removeClass(instance.elements.dialog, classes.capture);\r\n                // allow custom `onmoved` method\r\n                dispatchEvent('onmoved', instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Resets any changes made by moving the element to its original state,\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function resetMove(instance) {\r\n            movable = null;\r\n            var element = instance.elements.dialog;\r\n            element.style.left = element.style.top = '';\r\n        }\r\n\r\n        /**\r\n         * Updates the dialog move behavior.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateMovable(instance) {\r\n            if (instance.get('movable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.movable);\r\n                if (instance.isOpen()) {\r\n                    bindMovableEvents(instance);\r\n                }\r\n            } else {\r\n\r\n                //reset\r\n                resetMove(instance);\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.movable);\r\n                if (instance.isOpen()) {\r\n                    unbindMovableEvents(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /* Controls moving a dialog around */\r\n        //holde the current instance being resized\t\t\r\n        var resizable = null,\r\n            //holds the staring left offset when resize starts.\r\n            startingLeft = Number.Nan,\r\n            //holds the staring width when resize starts.\r\n            startingWidth = 0,\r\n            //holds the initial width when resized for the first time.\r\n            minWidth = 0,\r\n            //holds the offset of the resize handle.\r\n            handleOffset = 0\r\n        ;\r\n\r\n        /**\r\n         * Helper: sets the element width/height and updates left coordinate if neccessary.\r\n         *\r\n         * @param {Event} event\tDOM mousemove event object.\r\n         * @param {Node} element The element being moved.\r\n         * @param {Boolean} pinned A flag indicating if the element being resized is pinned to the screen.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function resizeElement(event, element, pageRelative) {\r\n\r\n            //calculate offsets from 0,0\r\n            var current = element;\r\n            var offsetLeft = 0;\r\n            var offsetTop = 0;\r\n            do {\r\n                offsetLeft += current.offsetLeft;\r\n                offsetTop += current.offsetTop;\r\n            } while (current = current.offsetParent);\r\n\r\n            // determine X,Y coordinates.\r\n            var X, Y;\r\n            if (pageRelative === true) {\r\n                X = event.pageX;\r\n                Y = event.pageY;\r\n            } else {\r\n                X = event.clientX;\r\n                Y = event.clientY;\r\n            }\r\n            // rtl handling\r\n            var isRTL = isRightToLeft();\r\n            if (isRTL) {\r\n                // reverse X \r\n                X = document.body.offsetWidth - X;\r\n                // if has a starting left, calculate offsetRight\r\n                if (!isNaN(startingLeft)) {\r\n                    offsetLeft = document.body.offsetWidth - offsetLeft - element.offsetWidth;\r\n                }\r\n            }\r\n\r\n            // set width/height\r\n            element.style.height = (Y - offsetTop + handleOffset) + 'px';\r\n            element.style.width = (X - offsetLeft + handleOffset) + 'px';\r\n\r\n            // if the element being resized has a starting left, maintain it.\r\n            // the dialog is centered, divide by half the offset to maintain the margins.\r\n            if (!isNaN(startingLeft)) {\r\n                var diff = Math.abs(element.offsetWidth - startingWidth) * 0.5;\r\n                if (isRTL) {\r\n                    //negate the diff, why?\r\n                    //when growing it should decrease left\r\n                    //when shrinking it should increase left\r\n                    diff *= -1;\r\n                }\r\n                if (element.offsetWidth > startingWidth) {\r\n                    //growing\r\n                    element.style.left = (startingLeft + diff) + 'px';\r\n                } else if (element.offsetWidth >= minWidth) {\r\n                    //shrinking\r\n                    element.style.left = (startingLeft - diff) + 'px';\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the start of a resize event, attached to the resize handle element mouse down event.\r\n         * Adds no-selection class to the body, disabling selection while moving.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         * \r\n         * @return {Boolean} false\r\n         */\r\n        function beginResize(event, instance) {\r\n            if (!instance.isMaximized()) {\r\n                var eventSrc;\r\n                if (event.type === 'touchstart') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    // allow custom `onresize` method\r\n                    dispatchEvent('onresize', instance);\r\n                    \r\n                    resizable = instance;\r\n                    handleOffset = instance.elements.resizeHandle.offsetHeight / 2;\r\n                    var element = instance.elements.dialog;\r\n                    addClass(element, classes.capture);\r\n                    startingLeft = parseInt(element.style.left, 10);\r\n                    element.style.height = element.offsetHeight + 'px';\r\n                    element.style.minHeight = instance.elements.header.offsetHeight + instance.elements.footer.offsetHeight + 'px';\r\n                    element.style.width = (startingWidth = element.offsetWidth) + 'px';\r\n\r\n                    if (element.style.maxWidth !== 'none') {\r\n                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\r\n                    }\r\n                    element.style.maxWidth = 'none';\r\n                    addClass(document.body, classes.noSelection);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The actual resize handler,  attached to document.body mousemove event.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function resize(event) {\r\n            if (resizable) {\r\n                var eventSrc;\r\n                if (event.type === 'touchmove') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    resizeElement(eventSrc, resizable.elements.dialog, !resizable.get('modal') && !resizable.get('pinned'));\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the end of a resize event,  attached to document.body mouseup event.\r\n         * Removes no-selection class from document.body, allowing selection.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function endResize() {\r\n            if (resizable) {\r\n                var instance = resizable;\r\n                resizable = null;\r\n                removeClass(document.body, classes.noSelection);\r\n                removeClass(instance.elements.dialog, classes.capture);\r\n                cancelClick = true;\r\n                // allow custom `onresized` method\r\n                dispatchEvent('onresized', instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Resets any changes made by resizing the element to its original state.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function resetResize(instance) {\r\n            resizable = null;\r\n            var element = instance.elements.dialog;\r\n            if (element.style.maxWidth === 'none') {\r\n                //clear inline styles.\r\n                element.style.maxWidth = element.style.minWidth = element.style.width = element.style.height = element.style.minHeight = element.style.left = '';\r\n                //reset variables.\r\n                startingLeft = Number.Nan;\r\n                startingWidth = minWidth = handleOffset = 0;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Updates the dialog move behavior.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateResizable(instance) {\r\n            if (instance.get('resizable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.resizable);\r\n                if (instance.isOpen()) {\r\n                    bindResizableEvents(instance);\r\n                }\r\n            } else {\r\n                //reset\r\n                resetResize(instance);\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.resizable);\r\n                if (instance.isOpen()) {\r\n                    unbindResizableEvents(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Reset move/resize on window resize.\r\n         *\r\n         * @param {Event} event\twindow resize event object.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function windowResize(/*event*/) {\r\n            for (var x = 0; x < openDialogs.length; x += 1) {\r\n                var instance = openDialogs[x];\r\n                if (instance.get('autoReset')) {\r\n                    resetMove(instance);\r\n                    resetResize(instance);\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * Bind dialogs events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindEvents(instance) {\r\n            // if first dialog, hook global handlers\r\n            if (openDialogs.length === 1) {\r\n                //global\r\n                on(window, 'resize', windowResize);\r\n                on(document.body, 'keyup', keyupHandler);\r\n                on(document.body, 'keydown', keydownHandler);\r\n                on(document.body, 'focus', onReset);\r\n\r\n                //move\r\n                on(document.documentElement, 'mousemove', move);\r\n                on(document.documentElement, 'touchmove', move, false, false);\r\n                on(document.documentElement, 'mouseup', endMove);\r\n                on(document.documentElement, 'touchend', endMove);\r\n                //resize\r\n                on(document.documentElement, 'mousemove', resize);\r\n                on(document.documentElement, 'touchmove', resize, false, false);\r\n                on(document.documentElement, 'mouseup', endResize);\r\n                on(document.documentElement, 'touchend', endResize);\r\n            }\r\n\r\n            // common events\r\n            on(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\r\n            on(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\r\n            on(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\r\n            on(instance.elements.reset[0], 'keydown', recycleTab);\r\n            on(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\r\n\r\n            //prevent handling key up when dialog is being opened by a key stroke.\r\n            cancelKeyup = true;\r\n            // hook in transition handler\r\n            on(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\r\n\r\n            // modelss only events\r\n            if (!instance.get('modal')) {\r\n                bindModelessEvents(instance);\r\n            }\r\n\r\n            // resizable\r\n            if (instance.get('resizable')) {\r\n                bindResizableEvents(instance);\r\n            }\r\n\r\n            // movable\r\n            if (instance.get('movable')) {\r\n                bindMovableEvents(instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Unbind dialogs events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindEvents(instance) {\r\n            // if last dialog, remove global handlers\r\n            if (openDialogs.length === 1) {\r\n                //global\r\n                off(window, 'resize', windowResize);\r\n                off(document.body, 'keyup', keyupHandler);\r\n                off(document.body, 'keydown', keydownHandler);\r\n                off(document.body, 'focus', onReset);\r\n                //move\r\n                off(document.documentElement, 'mousemove', move);\r\n                off(document.documentElement, 'mouseup', endMove);\r\n                //resize\r\n                off(document.documentElement, 'mousemove', resize);\r\n                off(document.documentElement, 'mouseup', endResize);\r\n            }\r\n\r\n            // common events\r\n            off(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\r\n            off(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\r\n            off(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\r\n            off(instance.elements.reset[0], 'keydown', recycleTab);\r\n            off(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\r\n\r\n            // hook out transition handler\r\n            on(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\r\n\r\n            // modelss only events\r\n            if (!instance.get('modal')) {\r\n                unbindModelessEvents(instance);\r\n            }\r\n\r\n            // movable\r\n            if (instance.get('movable')) {\r\n                unbindMovableEvents(instance);\r\n            }\r\n\r\n            // resizable\r\n            if (instance.get('resizable')) {\r\n                unbindResizableEvents(instance);\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * Bind modeless specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindModelessEvents(instance) {\r\n            on(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\r\n        }\r\n\r\n        /**\r\n         * Unbind modeless specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindModelessEvents(instance) {\r\n            off(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Bind movable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindMovableEvents(instance) {\r\n            on(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\r\n            on(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Unbind movable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindMovableEvents(instance) {\r\n            off(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\r\n            off(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler, false, false);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Bind resizable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindResizableEvents(instance) {\r\n            on(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\r\n            on(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Unbind resizable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindResizableEvents(instance) {\r\n            off(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\r\n            off(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Bind closable events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindClosableEvents(instance) {\r\n            on(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\r\n        }\r\n\r\n        /**\r\n         * Unbind closable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindClosableEvents(instance) {\r\n            off(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\r\n        }\r\n        // dialog API\r\n        return {\r\n            __init:initialize,\r\n            /**\r\n             * Check if dialog is currently open\r\n             *\r\n             * @return {Boolean}\r\n             */\r\n            isOpen: function () {\r\n                return this.__internal.isOpen;\r\n            },\r\n            isModal: function (){\r\n                return this.elements.root.className.indexOf(classes.modeless) < 0;\r\n            },\r\n            isMaximized:function(){\r\n                return this.elements.root.className.indexOf(classes.maximized) > -1;\r\n            },\r\n            isPinned:function(){\r\n                return this.elements.root.className.indexOf(classes.unpinned) < 0;\r\n            },\r\n            maximize:function(){\r\n                if(!this.isMaximized()){\r\n                    maximize(this);\r\n                }\r\n                return this;\r\n            },\r\n            restore:function(){\r\n                if(this.isMaximized()){\r\n                    restore(this);\r\n                }\r\n                return this;\r\n            },\r\n            pin:function(){\r\n                if(!this.isPinned()){\r\n                    pin(this);\r\n                }\r\n                return this;\r\n            },\r\n            unpin:function(){\r\n                if(this.isPinned()){\r\n                    unpin(this);\r\n                }\r\n                return this;\r\n            },\r\n            bringToFront:function(){\r\n                bringToFront(null, this);\r\n                return this;\r\n            },\r\n            /**\r\n             * Move the dialog to a specific x/y coordinates\r\n             *\r\n             * @param {Number} x    The new dialog x coordinate in pixels.\r\n             * @param {Number} y    The new dialog y coordinate in pixels.\r\n             *\r\n             * @return {Object} The dialog instance.\r\n             */\r\n            moveTo:function(x,y){\r\n                if(!isNaN(x) && !isNaN(y)){\r\n                    // allow custom `onmove` method\r\n                    dispatchEvent('onmove', this);\r\n                    \r\n                    var element = this.elements.dialog,\r\n                        current = element,\r\n                        offsetLeft = 0,\r\n                        offsetTop = 0;\r\n                    \r\n                    //subtract existing left,top\r\n                    if (element.style.left) {\r\n                        offsetLeft -= parseInt(element.style.left, 10);\r\n                    }\r\n                    if (element.style.top) {\r\n                        offsetTop -= parseInt(element.style.top, 10);\r\n                    }\r\n                    //calc offset\r\n                    do {\r\n                        offsetLeft += current.offsetLeft;\r\n                        offsetTop += current.offsetTop;\r\n                    } while (current = current.offsetParent);\r\n\r\n                    //calc left, top\r\n                    var left = (x - offsetLeft);\r\n                    var top  = (y - offsetTop);\r\n\r\n                    //// rtl handling\r\n                    if (isRightToLeft()) {\r\n                        left *= -1;\r\n                    }\r\n\r\n                    element.style.left = left + 'px';\r\n                    element.style.top = top + 'px';\r\n                    \r\n                    // allow custom `onmoved` method\r\n                    dispatchEvent('onmoved', this);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Resize the dialog to a specific width/height (the dialog must be 'resizable').\r\n             * The dialog can be resized to:\r\n             *  A minimum width equal to the initial display width\r\n             *  A minimum height equal to the sum of header/footer heights.\r\n             *\r\n             *\r\n             * @param {Number or String} width    The new dialog width in pixels or in percent.\r\n             * @param {Number or String} height   The new dialog height in pixels or in percent.\r\n             *\r\n             * @return {Object} The dialog instance.\r\n             */\r\n            resizeTo:function(width,height){\r\n                var w = parseFloat(width),\r\n                    h = parseFloat(height),\r\n                    regex = /(\\d*\\.\\d+|\\d+)%/\r\n                ;\r\n\r\n                if(!isNaN(w) && !isNaN(h) && this.get('resizable') === true){\r\n                    \r\n                    // allow custom `onresize` method\r\n                    dispatchEvent('onresize', this);\r\n                    \r\n                    if(('' + width).match(regex)){\r\n                        w = w / 100 * document.documentElement.clientWidth ;\r\n                    }\r\n\r\n                    if(('' + height).match(regex)){\r\n                        h = h / 100 * document.documentElement.clientHeight;\r\n                    }\r\n\r\n                    var element = this.elements.dialog;\r\n                    if (element.style.maxWidth !== 'none') {\r\n                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\r\n                    }\r\n                    element.style.maxWidth = 'none';\r\n                    element.style.minHeight = this.elements.header.offsetHeight + this.elements.footer.offsetHeight + 'px';\r\n                    element.style.width = w + 'px';\r\n                    element.style.height = h + 'px';\r\n                    \r\n                    // allow custom `onresized` method\r\n                    dispatchEvent('onresized', this);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Gets or Sets dialog settings/options \r\n             *\r\n             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n             * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            setting : function (key, value) {\r\n                var self = this;\r\n                var result = update(this, this.__internal.options, function(k,o,n){ optionUpdated(self,k,o,n); }, key, value);\r\n                if(result.op === 'get'){\r\n                    if(result.found){\r\n                        return result.value;\r\n                    }else if(typeof this.settings !== 'undefined'){\r\n                        return update(this, this.settings, this.settingUpdated || function(){}, key, value).value;\r\n                    }else{\r\n                        return undefined;\r\n                    }\r\n                }else if(result.op === 'set'){\r\n                    if(result.items.length > 0){\r\n                        var callback = this.settingUpdated || function(){};\r\n                        for(var x=0;x<result.items.length;x+=1){\r\n                            var item = result.items[x];\r\n                            if(!item.found && typeof this.settings !== 'undefined'){\r\n                                update(this, this.settings, callback, item.key, item.value);\r\n                            }\r\n                        }\r\n                    }\r\n                    return this;\r\n                }\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options \r\n             */\r\n            set:function(key, value){\r\n                this.setting(key,value);\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options \r\n             */\r\n            get:function(key){\r\n                return this.setting(key);\r\n            },\r\n            /**\r\n            * Sets dialog header\r\n            * @content {string or element}\r\n            *\r\n            * @return {undefined}\r\n            */\r\n            setHeader:function(content){\r\n                if(typeof content === 'string'){\r\n                    clearContents(this.elements.header);\r\n                    this.elements.header.innerHTML = content;\r\n                }else if (content instanceof window.HTMLElement && this.elements.header.firstChild !== content){\r\n                    clearContents(this.elements.header);\r\n                    this.elements.header.appendChild(content);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n            * Sets dialog contents\r\n            * @content {string or element}\r\n            *\r\n            * @return {undefined}\r\n            */\r\n            setContent:function(content){\r\n                if(typeof content === 'string'){\r\n                    clearContents(this.elements.content);\r\n                    this.elements.content.innerHTML = content;\r\n                }else if (content instanceof window.HTMLElement && this.elements.content.firstChild !== content){\r\n                    clearContents(this.elements.content);\r\n                    this.elements.content.appendChild(content);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Show the dialog as modal\r\n             *\r\n             * @return {Object} the dialog instance.\r\n             */\r\n            showModal: function(className){\r\n                return this.show(true, className);\r\n            },\r\n            /**\r\n             * Show the dialog\r\n             *\r\n             * @return {Object} the dialog instance.\r\n             */\r\n            show: function (modal, className) {\r\n                \r\n                // ensure initialization\r\n                initialize(this);\r\n\r\n                if ( !this.__internal.isOpen ) {\r\n\r\n                    // add to open dialogs\r\n                    this.__internal.isOpen = true;\r\n                    openDialogs.push(this);\r\n\r\n                    // save last focused element\r\n                    if(alertify.defaults.maintainFocus){\r\n                        this.__internal.activeElement = document.activeElement;\r\n                    }\r\n\r\n                    // set tabindex attribute on body element this allows script to give it focusable\r\n                    if(!document.body.hasAttribute('tabindex')) {\r\n                        document.body.setAttribute( 'tabindex', tabindex = '0');\r\n                    }\r\n\r\n                    //allow custom dom manipulation updates before showing the dialog.\r\n                    if(typeof this.prepare === 'function'){\r\n                        this.prepare();\r\n                    }\r\n\r\n                    bindEvents(this);\r\n\r\n                    if(modal !== undefined){\r\n                        this.set('modal', modal);\r\n                    }\r\n\r\n                    //save scroll to prevent document jump\r\n                    saveScrollPosition();\r\n\r\n                    ensureNoOverflow();\r\n\r\n                    // allow custom dialog class on show\r\n                    if(typeof className === 'string' && className !== ''){\r\n                        this.__internal.className = className;\r\n                        addClass(this.elements.root, className);\r\n                    }\r\n\r\n                    // maximize if start maximized\r\n                    if ( this.get('startMaximized')) {\r\n                        this.maximize();\r\n                    }else if(this.isMaximized()){\r\n                        restore(this);\r\n                    }\r\n\r\n                    updateAbsPositionFix(this);\r\n                    this.elements.root.removeAttribute('style');\r\n                    removeClass(this.elements.root, classes.animationOut);\r\n                    addClass(this.elements.root, classes.animationIn);\r\n\r\n                    // set 1s fallback in case transition event doesn't fire\r\n                    clearTimeout( this.__internal.timerIn);\r\n                    this.__internal.timerIn = setTimeout( this.__internal.transitionInHandler, transition.supported ? 1000 : 100 );\r\n\r\n                    if(isSafari){\r\n                        // force desktop safari reflow\r\n                        var root = this.elements.root;\r\n                        root.style.display  = 'none';\r\n                        setTimeout(function(){root.style.display  = 'block';}, 0);\r\n                    }\r\n\r\n                    //reflow\r\n                    reflow = this.elements.root.offsetWidth;\r\n                  \r\n                    // show dialog\r\n                    removeClass(this.elements.root, classes.hidden);\r\n\r\n                    //restore scroll to prevent document jump\r\n                    restoreScrollPosition();\r\n\r\n                    // internal on show event\r\n                    if(typeof this.hooks.onshow === 'function'){\r\n                        this.hooks.onshow.call(this);\r\n                    }\r\n\r\n                    // allow custom `onshow` method\r\n                    dispatchEvent('onshow', this);\r\n\r\n                }else{\r\n                    // reset move updates\r\n                    resetMove(this);\r\n                    // reset resize updates\r\n                    resetResize(this);\r\n                    // shake the dialog to indicate its already open\r\n                    addClass(this.elements.dialog, classes.shake);\r\n                    var self = this;\r\n                    setTimeout(function(){\r\n                        removeClass(self.elements.dialog, classes.shake);\r\n                    },200);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Close the dialog\r\n             *\r\n             * @return {Object} The dialog instance\r\n             */\r\n            close: function () {\r\n                if (this.__internal.isOpen ) {\r\n                    // custom `onclosing` event\r\n                    if(dispatchEvent('onclosing', this) !== false){\r\n\r\n                        unbindEvents(this);\r\n\r\n                        removeClass(this.elements.root, classes.animationIn);\r\n                        addClass(this.elements.root, classes.animationOut);\r\n\r\n                        // set 1s fallback in case transition event doesn't fire\r\n                        clearTimeout( this.__internal.timerOut );\r\n                        this.__internal.timerOut = setTimeout( this.__internal.transitionOutHandler, transition.supported ? 1000 : 100 );\r\n                        // hide dialog\r\n                        addClass(this.elements.root, classes.hidden);\r\n                        //reflow\r\n                        reflow = this.elements.modal.offsetWidth;\r\n\r\n                        // return focus to the last active element\r\n                        if (alertify.defaults.maintainFocus && this.__internal.activeElement) {\r\n                            this.__internal.activeElement.focus();\r\n                            this.__internal.activeElement = null;\r\n                        }\r\n\r\n                        // remove custom dialog class on hide\r\n                        if (typeof this.__internal.className !== 'undefined' && this.__internal.className !== '') {\r\n                            removeClass(this.elements.root, this.__internal.className);\r\n                        }\r\n\r\n                        // internal on close event\r\n                        if(typeof this.hooks.onclose === 'function'){\r\n                            this.hooks.onclose.call(this);\r\n                        }\r\n\r\n                        // allow custom `onclose` method\r\n                        dispatchEvent('onclose', this);\r\n\r\n                        //remove from open dialogs\r\n                        openDialogs.splice(openDialogs.indexOf(this),1);\r\n                        this.__internal.isOpen = false;\r\n\r\n                        ensureNoOverflow();\r\n                    }\r\n\r\n                }\r\n                // last dialog and tab index was set by us, remove it.\r\n                if(!openDialogs.length && tabindex === '0'){\r\n                    document.body.removeAttribute('tabindex');\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Close all open dialogs except this.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            closeOthers:function(){\r\n                alertify.closeAll(this);\r\n                return this;\r\n            },\r\n            /**\r\n             * Destroys this dialog instance\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            destroy:function(){\r\n                if(this.__internal) {\r\n                    if (this.__internal.isOpen ) {\r\n                        //mark dialog for destruction, this will be called on tranistionOut event.\r\n                        this.__internal.destroy = function(){\r\n                            destruct(this, initialize);\r\n                        };\r\n                        //close the dialog to unbind all events.\r\n                        this.close();\r\n                    }else if(!this.__internal.destroy){\r\n                        destruct(this, initialize);\r\n                    }\r\n                }\r\n                return this;\r\n            },\r\n        };\r\n\t} () );\r\n    var notifier = (function () {\r\n        var reflow,\r\n            element,\r\n            openInstances = [],\r\n            classes = defaults.notifier.classes,\r\n            baseClass = classes.base;\r\n        /**\r\n         * Helper: initializes the notifier instance\r\n         *\r\n         */\r\n        function initialize(instance) {\r\n\r\n            if (!instance.__internal) {\r\n                instance.__internal = {\r\n                    position: alertify.defaults.notifier.position,\r\n                    delay: alertify.defaults.notifier.delay,\r\n                };\r\n\r\n                element = document.createElement('DIV');\r\n                var transitionOff = 'transitionOff' in defaults.notifier ? defaults.notifier.transitionOff : defaults.transitionOff;\r\n                if(transitionOff){\r\n                    baseClass = classes.base + ' ajs-no-transition';\r\n                }\r\n                updatePosition(instance);\r\n            }\r\n\r\n            //add to DOM tree.\r\n            if (element.parentNode !== document.body) {\r\n                document.body.appendChild(element);\r\n            }\r\n        }\r\n\r\n        function pushInstance(instance) {\r\n            instance.__internal.pushed = true;\r\n            openInstances.push(instance);\r\n        }\r\n        function popInstance(instance) {\r\n            openInstances.splice(openInstances.indexOf(instance), 1);\r\n            instance.__internal.pushed = false;\r\n        }\r\n        /**\r\n         * Helper: update the notifier instance position\r\n         *\r\n         */\r\n        function updatePosition(instance) {\r\n            element.className = baseClass;\r\n            switch (instance.__internal.position) {\r\n            case 'top-right':\r\n                addClass(element, classes.top + ' ' + classes.right);\r\n                break;\r\n            case 'top-left':\r\n                addClass(element, classes.top + ' ' + classes.left);\r\n                break;\r\n            case 'top-center':\r\n                addClass(element, classes.top + ' ' + classes.center);\r\n                break;\r\n            case 'bottom-left':\r\n                addClass(element, classes.bottom + ' ' + classes.left);\r\n                break;\r\n            case 'bottom-center':\r\n                addClass(element, classes.bottom + ' ' + classes.center);\r\n                break;\r\n\r\n            default:\r\n            case 'bottom-right':\r\n                addClass(element, classes.bottom + ' ' + classes.right);\r\n                break;\r\n            }\r\n        }\r\n\r\n        /**\r\n        * creates a new notification message\r\n        *\r\n        * @param  {DOMElement} message\tThe notifier message element\r\n        * @param  {Number} wait   Time (in ms) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n        * @param  {Function} callback A callback function to be invoked when the message is dismissed.\r\n        *\r\n        * @return {undefined}\r\n        */\r\n        function create(div, callback) {\r\n\r\n            function clickDelegate(event, instance) {\r\n                if(!instance.__internal.closeButton || event.target.getAttribute('data-close') === 'true'){\r\n                    instance.dismiss(true);\r\n                }\r\n            }\r\n\r\n            function transitionDone(event, instance) {\r\n                // unbind event\r\n                off(instance.element, transition.type, transitionDone);\r\n                // remove the message\r\n                element.removeChild(instance.element);\r\n            }\r\n\r\n            function initialize(instance) {\r\n                if (!instance.__internal) {\r\n                    instance.__internal = {\r\n                        pushed: false,\r\n                        delay : undefined,\r\n                        timer: undefined,\r\n                        clickHandler: undefined,\r\n                        transitionEndHandler: undefined,\r\n                        transitionTimeout: undefined\r\n                    };\r\n                    instance.__internal.clickHandler = delegate(instance, clickDelegate);\r\n                    instance.__internal.transitionEndHandler = delegate(instance, transitionDone);\r\n                }\r\n                return instance;\r\n            }\r\n            function clearTimers(instance) {\r\n                clearTimeout(instance.__internal.timer);\r\n                clearTimeout(instance.__internal.transitionTimeout);\r\n            }\r\n            return initialize({\r\n                /* notification DOM element*/\r\n                element: div,\r\n                /*\r\n                 * Pushes a notification message\r\n                 * @param {string or DOMElement} content The notification message content\r\n                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                 *\r\n                 */\r\n                push: function (_content, _wait) {\r\n                    if (!this.__internal.pushed) {\r\n\r\n                        pushInstance(this);\r\n                        clearTimers(this);\r\n\r\n                        var content, wait;\r\n                        switch (arguments.length) {\r\n                        case 0:\r\n                            wait = this.__internal.delay;\r\n                            break;\r\n                        case 1:\r\n                            if (typeof (_content) === 'number') {\r\n                                wait = _content;\r\n                            } else {\r\n                                content = _content;\r\n                                wait = this.__internal.delay;\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            content = _content;\r\n                            wait = _wait;\r\n                            break;\r\n                        }\r\n                        this.__internal.closeButton = alertify.defaults.notifier.closeButton;\r\n                        // set contents\r\n                        if (typeof content !== 'undefined') {\r\n                            this.setContent(content);\r\n                        }\r\n                        // append or insert\r\n                        if (notifier.__internal.position.indexOf('top') < 0) {\r\n                            element.appendChild(this.element);\r\n                        } else {\r\n                            element.insertBefore(this.element, element.firstChild);\r\n                        }\r\n                        reflow = this.element.offsetWidth;\r\n                        addClass(this.element, classes.visible);\r\n                        // attach click event\r\n                        on(this.element, 'click', this.__internal.clickHandler);\r\n                        return this.delay(wait);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * {Function} callback function to be invoked before dismissing the notification message.\r\n                 * Remarks: A return value === 'false' will cancel the dismissal\r\n                 *\r\n                 */\r\n                ondismiss: function () { },\r\n                /*\r\n                 * {Function} callback function to be invoked when the message is dismissed.\r\n                 *\r\n                 */\r\n                callback: callback,\r\n                /*\r\n                 * Dismisses the notification message\r\n                 * @param {Boolean} clicked A flag indicating if the dismissal was caused by a click.\r\n                 *\r\n                 */\r\n                dismiss: function (clicked) {\r\n                    if (this.__internal.pushed) {\r\n                        clearTimers(this);\r\n                        if (!(typeof this.ondismiss === 'function' && this.ondismiss.call(this) === false)) {\r\n                            //detach click event\r\n                            off(this.element, 'click', this.__internal.clickHandler);\r\n                            // ensure element exists\r\n                            if (typeof this.element !== 'undefined' && this.element.parentNode === element) {\r\n                                //transition end or fallback\r\n                                this.__internal.transitionTimeout = setTimeout(this.__internal.transitionEndHandler, transition.supported ? 1000 : 100);\r\n                                removeClass(this.element, classes.visible);\r\n\r\n                                // custom callback on dismiss\r\n                                if (typeof this.callback === 'function') {\r\n                                    this.callback.call(this, clicked);\r\n                                }\r\n                            }\r\n                            popInstance(this);\r\n                        }\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Delays the notification message dismissal\r\n                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                 *\r\n                 */\r\n                delay: function (wait) {\r\n                    clearTimers(this);\r\n                    this.__internal.delay = typeof wait !== 'undefined' && !isNaN(+wait) ? +wait : notifier.__internal.delay;\r\n                    if (this.__internal.delay > 0) {\r\n                        var  self = this;\r\n                        this.__internal.timer = setTimeout(function () { self.dismiss(); }, this.__internal.delay * 1000);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Sets the notification message contents\r\n                 * @param {string or DOMElement} content The notification message content\r\n                 *\r\n                 */\r\n                setContent: function (content) {\r\n                    if (typeof content === 'string') {\r\n                        clearContents(this.element);\r\n                        this.element.innerHTML = content;\r\n                    } else if (content instanceof window.HTMLElement && this.element.firstChild !== content) {\r\n                        clearContents(this.element);\r\n                        this.element.appendChild(content);\r\n                    }\r\n                    if(this.__internal.closeButton){\r\n                        var close = document.createElement('span');\r\n                        addClass(close, classes.close);\r\n                        close.setAttribute('data-close', true);\r\n                        this.element.appendChild(close);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Dismisses all open notifications except this.\r\n                 *\r\n                 */\r\n                dismissOthers: function () {\r\n                    notifier.dismissAll(this);\r\n                    return this;\r\n                }\r\n            });\r\n        }\r\n\r\n        //notifier api\r\n        return {\r\n            /**\r\n             * Gets or Sets notifier settings.\r\n             *\r\n             * @param {string} key The setting name\r\n             * @param {Variant} value The setting value.\r\n             *\r\n             * @return {Object}\tif the called as a setter, return the notifier instance.\r\n             */\r\n            setting: function (key, value) {\r\n                //ensure init\r\n                initialize(this);\r\n\r\n                if (typeof value === 'undefined') {\r\n                    //get\r\n                    return this.__internal[key];\r\n                } else {\r\n                    //set\r\n                    switch (key) {\r\n                    case 'position':\r\n                        this.__internal.position = value;\r\n                        updatePosition(this);\r\n                        break;\r\n                    case 'delay':\r\n                        this.__internal.delay = value;\r\n                        break;\r\n                    }\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options\r\n             */\r\n            set:function(key,value){\r\n                this.setting(key,value);\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options\r\n             */\r\n            get:function(key){\r\n                return this.setting(key);\r\n            },\r\n            /**\r\n             * Creates a new notification message\r\n             *\r\n             * @param {string} type The type of notification message (simply a CSS class name 'ajs-{type}' to be added).\r\n             * @param {Function} callback  A callback function to be invoked when the message is dismissed.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            create: function (type, callback) {\r\n                //ensure notifier init\r\n                initialize(this);\r\n                //create new notification message\r\n                var div = document.createElement('div');\r\n                div.className = classes.message + ((typeof type === 'string' && type !== '') ? ' ' + classes.prefix + type : '');\r\n                return create(div, callback);\r\n            },\r\n            /**\r\n             * Dismisses all open notifications.\r\n             *\r\n             * @param {Object} excpet [optional] The notification object to exclude from dismissal.\r\n             *\r\n             */\r\n            dismissAll: function (except) {\r\n                var clone = openInstances.slice(0);\r\n                for (var x = 0; x < clone.length; x += 1) {\r\n                    var  instance = clone[x];\r\n                    if (except === undefined || except !== instance) {\r\n                        instance.dismiss();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    })();\r\n\r\n    /**\r\n     * Alertify public API\r\n     * This contains everything that is exposed through the alertify object.\r\n     *\r\n     * @return {Object}\r\n     */\r\n    function Alertify() {\r\n\r\n        // holds a references of created dialogs\r\n        var dialogs = {};\r\n\r\n        /**\r\n         * Extends a given prototype by merging properties from base into sub.\r\n         *\r\n         * @sub {Object} sub The prototype being overwritten.\r\n         * @base {Object} base The prototype being written.\r\n         *\r\n         * @return {Object} The extended prototype.\r\n         */\r\n        function extend(sub, base) {\r\n            // copy dialog pototype over definition.\r\n            for (var prop in base) {\r\n                if (base.hasOwnProperty(prop)) {\r\n                    sub[prop] = base[prop];\r\n                }\r\n            }\r\n            return sub;\r\n        }\r\n\r\n\r\n        /**\r\n        * Helper: returns a dialog instance from saved dialogs.\r\n        * and initializes the dialog if its not already initialized.\r\n        *\r\n        * @name {String} name The dialog name.\r\n        *\r\n        * @return {Object} The dialog instance.\r\n        */\r\n        function get_dialog(name) {\r\n            var dialog = dialogs[name].dialog;\r\n            //initialize the dialog if its not already initialized.\r\n            if (dialog && typeof dialog.__init === 'function') {\r\n                dialog.__init(dialog);\r\n            }\r\n            return dialog;\r\n        }\r\n\r\n        /**\r\n         * Helper:  registers a new dialog definition.\r\n         *\r\n         * @name {String} name The dialog name.\r\n         * @Factory {Function} Factory a function resposible for creating dialog prototype.\r\n         * @transient {Boolean} transient True to create a new dialog instance each time the dialog is invoked, false otherwise.\r\n         * @base {String} base the name of another dialog to inherit from.\r\n         *\r\n         * @return {Object} The dialog definition.\r\n         */\r\n        function register(name, Factory, transient, base) {\r\n            var definition = {\r\n                dialog: null,\r\n                factory: Factory\r\n            };\r\n\r\n            //if this is based on an existing dialog, create a new definition\r\n            //by applying the new protoype over the existing one.\r\n            if (base !== undefined) {\r\n                definition.factory = function () {\r\n                    return extend(new dialogs[base].factory(), new Factory());\r\n                };\r\n            }\r\n\r\n            if (!transient) {\r\n                //create a new definition based on dialog\r\n                definition.dialog = extend(new definition.factory(), dialog);\r\n            }\r\n            return dialogs[name] = definition;\r\n        }\r\n\r\n        return {\r\n            /**\r\n             * Alertify defaults\r\n             * \r\n             * @type {Object}\r\n             */\r\n            defaults: defaults,\r\n            /**\r\n             * Dialogs factory \r\n             *\r\n             * @param {string}      Dialog name.\r\n             * @param {Function}    A Dialog factory function.\r\n             * @param {Boolean}     Indicates whether to create a singleton or transient dialog.\r\n             * @param {String}      The name of the base type to inherit from.\r\n             */\r\n            dialog: function (name, Factory, transient, base) {\r\n\r\n                // get request, create a new instance and return it.\r\n                if (typeof Factory !== 'function') {\r\n                    return get_dialog(name);\r\n                }\r\n\r\n                if (this.hasOwnProperty(name)) {\r\n                    throw new Error('alertify.dialog: name already exists');\r\n                }\r\n\r\n                // register the dialog\r\n                var definition = register(name, Factory, transient, base);\r\n\r\n                if (transient) {\r\n\r\n                    // make it public\r\n                    this[name] = function () {\r\n                        //if passed with no params, consider it a get request\r\n                        if (arguments.length === 0) {\r\n                            return definition.dialog;\r\n                        } else {\r\n                            var instance = extend(new definition.factory(), dialog);\r\n                            //ensure init\r\n                            if (instance && typeof instance.__init === 'function') {\r\n                                instance.__init(instance);\r\n                            }\r\n                            instance['main'].apply(instance, arguments);\r\n                            return instance['show'].apply(instance);\r\n                        }\r\n                    };\r\n                } else {\r\n                    // make it public\r\n                    this[name] = function () {\r\n                        //ensure init\r\n                        if (definition.dialog && typeof definition.dialog.__init === 'function') {\r\n                            definition.dialog.__init(definition.dialog);\r\n                        }\r\n                        //if passed with no params, consider it a get request\r\n                        if (arguments.length === 0) {\r\n                            return definition.dialog;\r\n                        } else {\r\n                            var dialog = definition.dialog;\r\n                            dialog['main'].apply(definition.dialog, arguments);\r\n                            return dialog['show'].apply(definition.dialog);\r\n                        }\r\n                    };\r\n                }\r\n            },\r\n            /**\r\n             * Close all open dialogs.\r\n             *\r\n             * @param {Object} excpet [optional] The dialog object to exclude from closing.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            closeAll: function (except) {\r\n                var clone = openDialogs.slice(0);\r\n                for (var x = 0; x < clone.length; x += 1) {\r\n                    var instance = clone[x];\r\n                    if (except === undefined || except !== instance) {\r\n                        instance.close();\r\n                    }\r\n                }\r\n            },\r\n            /**\r\n             * Gets or Sets dialog settings/options. if the dialog is transient, this call does nothing.\r\n             *\r\n             * @param {string} name The dialog name.\r\n             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n             * @param {Variant} value Optional, the value associated with the key (in case it was a string).\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            setting: function (name, key, value) {\r\n\r\n                if (name === 'notifier') {\r\n                    return notifier.setting(key, value);\r\n                }\r\n\r\n                var dialog = get_dialog(name);\r\n                if (dialog) {\r\n                    return dialog.setting(key, value);\r\n                }\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options \r\n             */\r\n            set: function(name,key,value){\r\n                return this.setting(name, key,value);\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options \r\n             */\r\n            get: function(name, key){\r\n                return this.setting(name, key);\r\n            },\r\n            /**\r\n             * Creates a new notification message.\r\n             * If a type is passed, a class name \"ajs-{type}\" will be added.\r\n             * This allows for custom look and feel for various types of notifications.\r\n             *\r\n             * @param  {String | DOMElement}    [message=undefined]\t\tMessage text\r\n             * @param  {String}                 [type='']\t\t\t\tType of log message\r\n             * @param  {String}                 [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}               [callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            notify: function (message, type, wait, callback) {\r\n                return notifier.create(type, callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            message: function (message, wait, callback) {\r\n                return notifier.create(null, callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'success'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            success: function (message, wait, callback) {\r\n                return notifier.create('success', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'error'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            error: function (message, wait, callback) {\r\n                return notifier.create('error', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'warning'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            warning: function (message, wait, callback) {\r\n                return notifier.create('warning', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Dismisses all open notifications\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            dismissAll: function () {\r\n                notifier.dismissAll();\r\n            }\r\n        };\r\n    }\r\n    var alertify = new Alertify();\r\n\r\n    /**\r\n    * Alert dialog definition\r\n    *\r\n    * invoked by:\r\n    *\talertify.alert(message);\r\n    *\talertify.alert(title, message);\r\n    *\talertify.alert(message, onok);\r\n    *\talertify.alert(title, message, onok);\r\n     */\r\n    alertify.dialog('alert', function () {\r\n        return {\r\n            main: function (_title, _message, _onok) {\r\n                var title, message, onok;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    if (typeof _message === 'function') {\r\n                        message = _title;\r\n                        onok = _message;\r\n                    } else {\r\n                        title = _title;\r\n                        message = _message;\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    title = _title;\r\n                    message = _message;\r\n                    onok = _onok;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('onok', onok);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.ok,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: 0,\r\n                        select: false\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                // nothing\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                this.setContent(message);\r\n            },\r\n            settings: {\r\n                message: undefined,\r\n                onok: undefined,\r\n                label: undefined,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'label':\r\n                    if (this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].element.innerHTML = newValue;\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                if (typeof this.get('onok') === 'function') {\r\n                    var returnValue = this.get('onok').call(this, closeEvent);\r\n                    if (typeof returnValue !== 'undefined') {\r\n                        closeEvent.cancel = !returnValue;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    });\r\n    /**\r\n     * Confirm dialog object\r\n     *\r\n     *\talertify.confirm(message);\r\n     *\talertify.confirm(message, onok);\r\n     *\talertify.confirm(message, onok, oncancel);\r\n     *\talertify.confirm(title, message, onok, oncancel);\r\n     */\r\n    alertify.dialog('confirm', function () {\r\n\r\n        var autoConfirm = {\r\n            timer: null,\r\n            index: null,\r\n            text: null,\r\n            duration: null,\r\n            task: function (event, self) {\r\n                if (self.isOpen()) {\r\n                    self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text + ' (&#8207;' + autoConfirm.duration + '&#8207;) ';\r\n                    autoConfirm.duration -= 1;\r\n                    if (autoConfirm.duration === -1) {\r\n                        clearAutoConfirm(self);\r\n                        var button = self.__internal.buttons[autoConfirm.index];\r\n                        var closeEvent = createCloseEvent(autoConfirm.index, button);\r\n\r\n                        if (typeof self.callback === 'function') {\r\n                            self.callback.apply(self, [closeEvent]);\r\n                        }\r\n                        //close the dialog.\r\n                        if (closeEvent.close !== false) {\r\n                            self.close();\r\n                        }\r\n                    }\r\n                } else {\r\n                    clearAutoConfirm(self);\r\n                }\r\n            }\r\n        };\r\n\r\n        function clearAutoConfirm(self) {\r\n            if (autoConfirm.timer !== null) {\r\n                clearInterval(autoConfirm.timer);\r\n                autoConfirm.timer = null;\r\n                self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text;\r\n            }\r\n        }\r\n\r\n        function startAutoConfirm(self, index, duration) {\r\n            clearAutoConfirm(self);\r\n            autoConfirm.duration = duration;\r\n            autoConfirm.index = index;\r\n            autoConfirm.text = self.__internal.buttons[index].element.innerHTML;\r\n            autoConfirm.timer = setInterval(delegate(self, autoConfirm.task), 1000);\r\n            autoConfirm.task(null, self);\r\n        }\r\n\r\n\r\n        return {\r\n            main: function (_title, _message, _onok, _oncancel) {\r\n                var title, message, onok, oncancel;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    message = _title;\r\n                    onok = _message;\r\n                    break;\r\n                case 3:\r\n                    message = _title;\r\n                    onok = _message;\r\n                    oncancel = _onok;\r\n                    break;\r\n                case 4:\r\n                    title = _title;\r\n                    message = _message;\r\n                    onok = _onok;\r\n                    oncancel = _oncancel;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('onok', onok);\r\n                this.set('oncancel', oncancel);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ENTER,\r\n                            className: alertify.defaults.theme.ok,\r\n                        },\r\n                        {\r\n                            text: alertify.defaults.glossary.cancel,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.cancel,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: 0,\r\n                        select: false\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                //nothing\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                this.setContent(message);\r\n            },\r\n            settings: {\r\n                message: null,\r\n                labels: null,\r\n                onok: null,\r\n                oncancel: null,\r\n                defaultFocus: null,\r\n                reverseButtons: null,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'labels':\r\n                    if ('ok' in newValue && this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].text = newValue.ok;\r\n                        this.__internal.buttons[0].element.innerHTML = newValue.ok;\r\n                    }\r\n                    if ('cancel' in newValue && this.__internal.buttons[1].element) {\r\n                        this.__internal.buttons[1].text = newValue.cancel;\r\n                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;\r\n                    }\r\n                    break;\r\n                case 'reverseButtons':\r\n                    if (newValue === true) {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\r\n                    } else {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\r\n                    }\r\n                    break;\r\n                case 'defaultFocus':\r\n                    this.__internal.focus.element = newValue === 'ok' ? 0 : 1;\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                clearAutoConfirm(this);\r\n                var returnValue;\r\n                switch (closeEvent.index) {\r\n                case 0:\r\n                    if (typeof this.get('onok') === 'function') {\r\n                        returnValue = this.get('onok').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if (typeof this.get('oncancel') === 'function') {\r\n                        returnValue = this.get('oncancel').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            autoOk: function (duration) {\r\n                startAutoConfirm(this, 0, duration);\r\n                return this;\r\n            },\r\n            autoCancel: function (duration) {\r\n                startAutoConfirm(this, 1, duration);\r\n                return this;\r\n            }\r\n        };\r\n    });\r\n    /**\r\n     * Prompt dialog object\r\n     *\r\n     * invoked by:\r\n     *\talertify.prompt(message);\r\n     *\talertify.prompt(message, value);\r\n     *\talertify.prompt(message, value, onok);\r\n     *\talertify.prompt(message, value, onok, oncancel);\r\n     *\talertify.prompt(title, message, value, onok, oncancel);\r\n     */\r\n    alertify.dialog('prompt', function () {\r\n        var input = document.createElement('INPUT');\r\n        var p = document.createElement('P');\r\n        return {\r\n            main: function (_title, _message, _value, _onok, _oncancel) {\r\n                var title, message, value, onok, oncancel;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    message = _title;\r\n                    value = _message;\r\n                    break;\r\n                case 3:\r\n                    message = _title;\r\n                    value = _message;\r\n                    onok = _value;\r\n                    break;\r\n                case 4:\r\n                    message = _title;\r\n                    value = _message;\r\n                    onok = _value;\r\n                    oncancel = _onok;\r\n                    break;\r\n                case 5:\r\n                    title = _title;\r\n                    message = _message;\r\n                    value = _value;\r\n                    onok = _onok;\r\n                    oncancel = _oncancel;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('value', value);\r\n                this.set('onok', onok);\r\n                this.set('oncancel', oncancel);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ENTER,\r\n                            className: alertify.defaults.theme.ok,\r\n                        },\r\n                        {\r\n                            text: alertify.defaults.glossary.cancel,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.cancel,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: input,\r\n                        select: true\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                input.className = alertify.defaults.theme.input;\r\n                input.setAttribute('type', 'text');\r\n                input.value = this.get('value');\r\n                this.elements.content.appendChild(p);\r\n                this.elements.content.appendChild(input);\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                if (typeof message === 'string') {\r\n                    clearContents(p);\r\n                    p.innerHTML = message;\r\n                } else if (message instanceof window.HTMLElement && p.firstChild !== message) {\r\n                    clearContents(p);\r\n                    p.appendChild(message);\r\n                }\r\n            },\r\n            settings: {\r\n                message: undefined,\r\n                labels: undefined,\r\n                onok: undefined,\r\n                oncancel: undefined,\r\n                value: '',\r\n                type:'text',\r\n                reverseButtons: undefined,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'value':\r\n                    input.value = newValue;\r\n                    break;\r\n                case 'type':\r\n                    switch (newValue) {\r\n                    case 'text':\r\n                    case 'color':\r\n                    case 'date':\r\n                    case 'datetime-local':\r\n                    case 'email':\r\n                    case 'month':\r\n                    case 'number':\r\n                    case 'password':\r\n                    case 'search':\r\n                    case 'tel':\r\n                    case 'time':\r\n                    case 'week':\r\n                        input.type = newValue;\r\n                        break;\r\n                    default:\r\n                        input.type = 'text';\r\n                        break;\r\n                    }\r\n                    break;\r\n                case 'labels':\r\n                    if (newValue.ok && this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].element.innerHTML = newValue.ok;\r\n                    }\r\n                    if (newValue.cancel && this.__internal.buttons[1].element) {\r\n                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;\r\n                    }\r\n                    break;\r\n                case 'reverseButtons':\r\n                    if (newValue === true) {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\r\n                    } else {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                var returnValue;\r\n                switch (closeEvent.index) {\r\n                case 0:\r\n                    this.settings.value = input.value;\r\n                    if (typeof this.get('onok') === 'function') {\r\n                        returnValue = this.get('onok').call(this, closeEvent, this.settings.value);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if (typeof this.get('oncancel') === 'function') {\r\n                        returnValue = this.get('oncancel').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    if(!closeEvent.cancel){\r\n                        input.value = this.settings.value;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n    });\r\n\r\n    // CommonJS\r\n    if ( typeof module === 'object' && typeof module.exports === 'object' ) {\r\n        module.exports = alertify;\r\n    // AMD\r\n    } else if ( typeof define === 'function' && define.amd) {\r\n        define( [], function () {\r\n            return alertify;\r\n        } );\r\n    // window\r\n    } else if ( !window.alertify ) {\r\n        window.alertify = alertify;\r\n    }\r\n\r\n} ( typeof window !== 'undefined' ? window : this ) );\r\n"],"x_google_ignoreList":[]}